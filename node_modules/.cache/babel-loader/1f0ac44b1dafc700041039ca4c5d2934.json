{"ast":null,"code":"var _jsxFileName = \"/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/MultiRangeSlider.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useState, useRef, useCallback, useEffect } from \"react\";\nimport \"../css/multiRangeSlider.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MultiRangeSlider = props => {\n  _s();\n\n  var min = props.min;\n  var max = props.max; // Creating the state variables\n\n  const [minVal, setMinVal] = useState(min);\n  const [maxVal, setMaxVal] = useState(max); // Creating the refs\n\n  const minValRef = useRef(min);\n  const maxValRef = useRef(max); // Create a ref to our slider\n\n  const range = useRef(null); // Convert to percentage\n\n  const getPercent = useCallback(value => Math.round((value - min) / (max - min) * 100), [min, max]); // Set width of the range to change from the left side\n\n  useEffect(() => {\n    const minPercent = getPercent(minVal);\n    const maxPercent = getPercent(maxValRef.current);\n\n    if (range.current) {\n      range.current.style.left = `${minPercent}%`;\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [minVal, getPercent]); // Set width of the range to change from the right side\n\n  useEffect(() => {\n    const minPercent = getPercent(minValRef.current);\n    const maxPercent = getPercent(maxVal);\n\n    if (range.current) {\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [maxVal, getPercent]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: min,\n      max: max,\n      value: minVal,\n      onChange: event => {\n        props.onChange(); // maxVal - 1, maintains a difference of one between minVal and maxVal.\n        // This is done to make sure that minVal does not exceed maxVal.\n\n        const value = Math.min(Number(event.target.value), maxVal - 1);\n        setMinVal(value);\n        minValRef.current = value;\n        props.onChange(value, maxVal);\n      },\n      className: \"thumb thumb--left\",\n      style: {\n        zIndex: minVal > max - 100 && \"5\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: min,\n      max: max,\n      value: maxVal,\n      onChange: event => {\n        // minVal + 1, maintains a difference of one between minVal and maxVal.\n        // This is done to make sure that maxVal isn't smaller than minVal.\n        const value = Math.max(Number(event.target.value), minVal + 1);\n        setMaxVal(value);\n        maxValRef.current = value;\n        props.onChange(minVal, value);\n      },\n      className: \"thumb thumb--right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__track\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: range,\n        className: \"slider__range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__left-value\",\n        children: [minVal, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__right-value\",\n        children: [maxVal, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}; // Set each prop as type number\n\n\n_s(MultiRangeSlider, \"To0AX+fow2coG+aI6vGuXqDeI8s=\");\n\n_c = MultiRangeSlider;\nMultiRangeSlider.propTypes = {\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired\n};\nexport default MultiRangeSlider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiRangeSlider\");","map":{"version":3,"sources":["/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/MultiRangeSlider.jsx"],"names":["React","PropTypes","useState","useRef","useCallback","useEffect","MultiRangeSlider","props","min","max","minVal","setMinVal","maxVal","setMaxVal","minValRef","maxValRef","range","getPercent","value","Math","round","minPercent","maxPercent","current","style","left","width","event","onChange","Number","target","zIndex","propTypes","number","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useState, useRef, useCallback, useEffect } from \"react\";\n\nimport \"../css/multiRangeSlider.css\";\n\nconst MultiRangeSlider = (props) => {\n  var min = props.min;\n  var max = props.max;\n\n  // Creating the state variables\n  const [minVal, setMinVal] = useState(min);\n  const [maxVal, setMaxVal] = useState(max);\n\n  // Creating the refs\n  const minValRef = useRef(min);\n  const maxValRef = useRef(max);\n\n  // Create a ref to our slider\n  const range = useRef(null);\n\n  // Convert to percentage\n  const getPercent = useCallback(\n    (value) => Math.round(((value - min) / (max - min)) * 100),\n    [min, max]\n  );\n\n  // Set width of the range to change from the left side\n  useEffect(() => {\n    const minPercent = getPercent(minVal);\n    const maxPercent = getPercent(maxValRef.current);\n\n    if (range.current) {\n      range.current.style.left = `${minPercent}%`;\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [minVal, getPercent]);\n\n  // Set width of the range to change from the right side\n  useEffect(() => {\n    const minPercent = getPercent(minValRef.current);\n    const maxPercent = getPercent(maxVal);\n\n    if (range.current) {\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [maxVal, getPercent]);\n\n  return (\n    <React.Fragment>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={minVal}\n        onChange={(event) => {\n          props.onChange();\n\n          // maxVal - 1, maintains a difference of one between minVal and maxVal.\n          // This is done to make sure that minVal does not exceed maxVal.\n          const value = Math.min(Number(event.target.value), maxVal - 1);\n          setMinVal(value);\n          minValRef.current = value;\n          props.onChange(value, maxVal);\n        }}\n        className=\"thumb thumb--left\"\n        style={{ zIndex: minVal > max - 100 && \"5\" }}\n      />\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={maxVal}\n        onChange={(event) => {\n          // minVal + 1, maintains a difference of one between minVal and maxVal.\n          // This is done to make sure that maxVal isn't smaller than minVal.\n          const value = Math.max(Number(event.target.value), minVal + 1);\n          setMaxVal(value);\n          maxValRef.current = value;\n\n          props.onChange(minVal, value);\n        }}\n        className=\"thumb thumb--right\"\n      />\n\n      {/* Creating our own slider here */}\n      <div className=\"slider\">\n        <div className=\"slider__track\" />\n        <div ref={range} className=\"slider__range\" />\n\n        <div className=\"slider__left-value\">{minVal}%</div>\n        <div className=\"slider__right-value\">{maxVal}%</div>\n      </div>\n    </React.Fragment>\n  );\n};\n\n// Set each prop as type number\nMultiRangeSlider.propTypes = {\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n};\n\nexport default MultiRangeSlider;\n"]},"metadata":{},"sourceType":"module"}