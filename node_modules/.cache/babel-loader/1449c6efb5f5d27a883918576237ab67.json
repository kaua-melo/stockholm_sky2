{"ast":null,"code":"var _jsxFileName = \"/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/D3YearGrid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { getYear } from \"../services/cloud_data_functions\";\nimport \"../css/D3YearGrid.css\";\nimport MultiRangeSlider from \"./MultiRangeSlider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction D3YearGrid(props) {\n  _s();\n\n  const d3Grid = useRef(); // const [data, setData] = useState([]);\n  // 1 = day_number\n  // 2 = radiation/c_index\n  // 3 = months\n  // 4 = play song\n\n  const [sortMethod, setSortMethod] = useState(1);\n  const [svg, setSvg] = useState(null);\n  const [recs, setRecs] = useState({});\n  const [nRecsPerRow, setNRecsPerRow] = useState(null);\n  const [gridGap, setGridGap] = useState({});\n  const [monthsLength, setMonthsLength] = useState({}); // const [indexThreshold, setIndexThreshold] = useState(100);\n\n  const [filterMin, setFilterMin] = useState(0);\n  const [filterMax, setFilterMax] = useState(100);\n  const [monthNames, setMonthNames] = useState([\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]);\n  useEffect(() => {\n    console.log(\"useEffect 1\"); // The data should be all ready when we load this component :)\n    // console.log(\"Inside D3YearGrid!\");\n    // console.log(props.data);\n    // console.log(\"year: \" + props.year);\n\n    const margin = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    };\n    const width = parseInt(d3.select(\".d3Container\").style(\"width\")); // const height = parseInt(d3.select(\".d3Container\").style(\"height\"));\n\n    var svg_width = width - margin.left - margin.right;\n    const height = 1 * width; // const gridGapX = 0;\n    // const gridGapY = 0;\n    // setGridGap({ x: gridGapX, y: gridGapY });\n    // set up the svg\n\n    const svg_temp = d3.select(d3Grid.current).attr(\"width\", width - margin.left - margin.right).attr(\"height\", height - margin.top - margin.bottom).attr(\"class\", \"D3Svg\") // .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    setSvg(svg_temp);\n    const gridGapX = 0;\n    const gridGapY = 0;\n    setGridGap({\n      x: gridGapX,\n      y: gridGapY\n    });\n    var n_recs_per_row = 20;\n    setNRecsPerRow(n_recs_per_row);\n    var rec_w = Math.floor(0.7 * svg_width / n_recs_per_row);\n    var rec_h = rec_w;\n    setRecs({\n      width: rec_w,\n      height: rec_h\n    });\n  }, []); // Once the svg state has been updated.\n\n  useEffect(() => {\n    console.log(\"useEffect 2\"); // At the beginning of this hook component, we define svg (const [svg, setSvg] = useState(null);)\n    // So this function here will be called. That's why we have to check whether there's a 'svg' before\n    // we try to proceed\n\n    if (svg && recs && nRecsPerRow && gridGap) {\n      let svg_width = svg.style(\"width\").replace(\"px\", \"\"); // Add the rectangles\n\n      svg.selectAll(\"rect\") // There's no 'rect' to select. But this is how we do to fill the svg with 'rects'.\n      .data(props.data) // here we load the data\n      .enter().append(\"rect\") // .enter().append() -> for each datapoint in the dataset, add a 'rect'.\n      .attr(\"width\", recs.width).attr(\"height\", recs.height).attr(\"x\", function (d, i) {\n        return i % nRecsPerRow * (recs.width + gridGap.x) + 0.15 * svg_width;\n      }).attr(\"y\", function (d, i) {\n        return Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) + 0.15 * svg_width;\n      }).attr(\"fill\", function (d, i) {\n        var bright_color = [100, 146, 230];\n        var dark_color = [99, 112, 124];\n        var factor = Math.floor(d.c_index / 10) * 10; // hard coding colors:\n\n        var color = [];\n\n        if (factor < 10) {\n          // 1.jpg\n          color = [100, 146, 230];\n        } else if (factor >= 10 && factor < 20) {\n          // 2.jpg\n          color = [99, 143, 224];\n        } else if (factor >= 20 && factor < 30) {\n          // 3.jpg\n          color = [96, 142, 214];\n        } else if (factor >= 30 && factor < 40) {\n          // 4.jpg\n          color = [94, 138, 204];\n        } else if (factor >= 40 && factor < 50) {\n          // 5.jpg\n          color = [94, 136, 193];\n        } else if (factor >= 50 && factor < 60) {\n          // 6.jpg\n          color = [93, 131, 182];\n        } else if (factor >= 60 && factor < 70) {\n          // 7.jpg\n          color = [93, 128, 170];\n        } else if (factor >= 70 && factor < 80) {\n          // 8.jpg\n          color = [95, 124, 154];\n        } else if (factor >= 80 && factor < 90) {\n          // 9.jpg\n          color = [97, 118, 138];\n        } else if (factor >= 90) {\n          // 10.jpg\n          color = [99, 112, 124];\n        }\n\n        return \"rgba(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \", 1)\";\n      }).style(\"stroke-opacity\", 1) // set the stroke opacity\n      .style(\"stroke\", \"black\") // set the line colour\n      .style(\"stroke-width\", 0.5) // set the stroke width\n      .html(function (d, i) {\n        return d.day_number;\n      }); // Adding month labels\n\n      svg.selectAll(\"text\").data(monthNames).enter().append(\"text\").text(function (d) {\n        return d;\n      }).attr(\"x\", 10).attr(\"y\", function (d, i) {\n        return 97 + i * 33.5;\n      }) // .style(\"font-size\", \"12px\")\n      .attr(\"class\", \"monthLabel\") // .style(\"fill\", \"rgb(150,150,150)\")\n      .on(\"mouseover\", handleMouseOverMonthLabel).on(\"mouseout\", handleMouseOutMonthLabel); // We need to check if the year is a leap year because in that case the month\n      // of february has 29 days instead of 28. This will be essential for sorting\n      // the months visually.\n\n      if (props.data.length === 366) {\n        setMonthsLength({\n          1: 31,\n          2: 29,\n          // February has 29 days in leap years\n          3: 31,\n          4: 30,\n          5: 31,\n          6: 30,\n          7: 31,\n          8: 31,\n          9: 30,\n          10: 31,\n          11: 30,\n          12: 31\n        });\n      } else if (props.data.length === 365) {\n        setMonthsLength({\n          1: 31,\n          2: 28,\n          // February has 28 days in non-leap years\n          3: 31,\n          4: 30,\n          5: 31,\n          6: 30,\n          7: 31,\n          8: 31,\n          9: 30,\n          10: 31,\n          11: 30,\n          12: 31\n        });\n      }\n    }\n  }, [svg, recs, nRecsPerRow, gridGap]);\n\n  function handleSortLight() {\n    // console.log(\"Sort Light\");\n    if (sortMethod !== 2) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n        svg.selectAll(\"rect\").sort(function (x, y) {\n          return d3.ascending(x.c_index, y.c_index);\n        }).transition().duration(2000).attr(\"width\", recs.width).attr(\"height\", recs.height).attr(\"x\", function (d, i) {\n          return i % nRecsPerRow * (recs.width + gridGap.x) + 0.15 * svg_width;\n        }).attr(\"y\", function (d, i) {\n          // console.log(Math.floor(i / 33));\n          return Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) + 0.15 * svg_width;\n        }); // Hiding month labels\n\n        svg.selectAll(\"text\").transition().duration(2000).attr(\"x\", -150).attr(\"y\", function (d, i) {\n          return 97 + i * 33.5;\n        });\n      }\n\n      setSortMethod(2);\n    }\n  }\n\n  function handleSortDay() {\n    // console.log(\"Sort Day\");\n    if (sortMethod !== 1) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        setSortMethod(1);\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n        svg.selectAll(\"rect\").sort(function (x, y) {\n          return d3.ascending(x.day_number, y.day_number);\n        }).transition().duration(2000).attr(\"width\", recs.width).attr(\"height\", recs.height).attr(\"x\", function (d, i) {\n          return i % nRecsPerRow * (recs.width + gridGap.x) + 0.15 * svg_width;\n        }).attr(\"y\", function (d, i) {\n          // console.log(Math.floor(i / 33));\n          return Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) + 0.15 * svg_width;\n        }); // Hiding month labels\n\n        svg.selectAll(\"text\").transition().duration(2000).attr(\"x\", 10).attr(\"y\", function (d, i) {\n          return 97 + i * 33.5;\n        });\n      }\n    }\n  }\n\n  function handleSortMonth() {\n    console.log(\"Sort Month\");\n\n    if (sortMethod !== 3) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        setSortMethod(3);\n        console.log(\"Group Month!\");\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n        svg.selectAll(\"rect\").sort(function (x, y) {\n          return d3.ascending(x.day_number, y.day_number);\n        }).transition().duration(2000).attr(\"width\", recs.width).attr(\"height\", recs.height).attr(\"x\", function (d, i) {\n          // This will be useful for knowing how to distribute the\n          //  squares in months. We'll need this logic becausse there are\n          //  leap years, where the month of February has 29 days.\n          let summedDaysPreviousMonth = 0;\n\n          for (let m = 1; m < d.month; m++) {\n            summedDaysPreviousMonth += monthsLength[m];\n          } // January\n\n\n          if (d.month === 1) {\n            return i % 6 * recs.width + 0.05 * svg_width;\n          } // February\n          else if (d.month === 2) {\n              return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 7 * recs.width;\n            } // March\n            else if (d.month === 3) {\n                return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 14 * recs.width;\n              } // April\n              else if (d.month === 4) {\n                  return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 21 * recs.width;\n                } // May\n                else if (d.month === 5) {\n                    return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width;\n                  } // Jun\n                  else if (d.month === 6) {\n                      return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 7 * recs.width;\n                    } // July\n                    else if (d.month === 7) {\n                        return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 14 * recs.width;\n                      } // August\n                      else if (d.month === 8) {\n                          return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 21 * recs.width;\n                        } // September\n                        else if (d.month === 9) {\n                            return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width;\n                          } // October\n                          else if (d.month === 10) {\n                              return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 7 * recs.width;\n                            } // November\n                            else if (d.month === 11) {\n                                return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 14 * recs.width;\n                              } // December\n                              else if (d.month === 12) {\n                                  return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 21 * recs.width;\n                                } else {\n                                  return 500;\n                                }\n        }).attr(\"y\", function (d, i) {\n          // This will be useful for knowing how to distribute the\n          //  squares in months. We'll need this logic becausse there are\n          //  leap years, where the month of February has 29 days.\n          let summedDaysPreviousMonth = 0;\n\n          for (let m = 1; m < d.month; m++) {\n            summedDaysPreviousMonth += monthsLength[m];\n          } // January\n\n\n          if (d.month === 1) {\n            return Math.floor(i / 6) * recs.height + 0.05 * svg_width;\n          } // February\n          else if (d.month === 2) {\n              return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width;\n            } // March\n            else if (d.month === 3) {\n                return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width;\n              } // April\n              else if (d.month === 4) {\n                  return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width;\n                } // May\n                else if (d.month === 5) {\n                    return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width + 9 * recs.height;\n                  } // June\n                  else if (d.month === 6) {\n                      return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width + 9 * recs.height;\n                    } // July\n                    else if (d.month === 7) {\n                        return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width + 9 * recs.height;\n                      } // August\n                      else if (d.month === 8) {\n                          return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width + 9 * recs.height;\n                        } // September\n                        else if (d.month === 9) {\n                            return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width + 18 * recs.height;\n                          } // October\n                          else if (d.month === 10) {\n                              return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width + 18 * recs.height;\n                            } // November\n                            else if (d.month === 11) {\n                                return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width + 18 * recs.height;\n                              } // Dececmber\n                              else if (d.month === 12) {\n                                  return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width + 18 * recs.height;\n                                }\n        }); // Writing months names\n\n        svg.selectAll(\"text\").transition().duration(2000).attr(\"x\", function (d, i) {\n          // if (d === \"January\") {\n          if (i === 0) {\n            return 0.05 * svg_width; // } else if (d === \"February\") {\n          } else if (i === 1) {\n            return 0.05 * svg_width + 7 * recs.width; // } else if (d === \"March\") {\n          } else if (i === 2) {\n            return 0.05 * svg_width + 14 * recs.width; // } else if (d === \"April\") {\n          } else if (i === 3) {\n            return 0.05 * svg_width + 21 * recs.width;\n          } // 2nd row\n          // else if (d === \"May\") {\n          else if (i === 4) {\n              return 0.05 * svg_width; // } else if (d === \"June\") {\n            } else if (i === 5) {\n              return 0.05 * svg_width + 7 * recs.width; // } else if (d === \"July\") {\n            } else if (i === 6) {\n              return 0.05 * svg_width + 14 * recs.width; // } else if (d === \"August\") {\n            } else if (i === 7) {\n              return 0.05 * svg_width + 21 * recs.width;\n            } // 3rd row\n            // else if (d === \"September\") {\n            else if (i === 8) {\n                return 0.05 * svg_width; // } else if (d === \"October\") {\n              } else if (i === 9) {\n                return 0.05 * svg_width + 7 * recs.width; // } else if (d === \"November\") {\n              } else if (i === 10) {\n                return 0.05 * svg_width + 14 * recs.width; // } else if (d === \"December\") {\n              } else if (i === 11) {\n                return 0.05 * svg_width + 21 * recs.width;\n              }\n        }).attr(\"y\", function (d, i) {\n          // if (d === \"January\") {\n          if (i === 0) {\n            return 0.05 * svg_width - 10; // } else if (d === \"February\") {\n          } else if (i === 1) {\n            return 0.05 * svg_width - 10; // } else if (d === \"March\") {\n          } else if (i === 2) {\n            return 0.05 * svg_width - 10; // } else if (d === \"April\") {\n          } else if (i === 3) {\n            return 0.05 * svg_width - 10;\n          } // 2nd row\n          // else if (d === \"May\") {\n          else if (i === 4) {\n              return 0.05 * svg_width + 9 * recs.height - 10; // } else if (d === \"June\") {\n            } else if (i === 5) {\n              return 0.05 * svg_width + 9 * recs.height - 10; // } else if (d === \"July\") {\n            } else if (i === 6) {\n              return 0.05 * svg_width + 9 * recs.height - 10; // } else if (d === \"August\") {\n            } else if (i === 7) {\n              return 0.05 * svg_width + 9 * recs.height - 10;\n            } // 3rd row\n            // else if (d === \"September\") {\n            else if (i === 8) {\n                return 0.05 * svg_width + 18 * recs.height - 10; // } else if (d === \"October\") {\n              } else if (i === 9) {\n                return 0.05 * svg_width + 18 * recs.height - 10; // } else if (d === \"November\") {\n              } else if (i === 10) {\n                return 0.05 * svg_width + 18 * recs.height - 10; // } else if (d === \"December\") {\n              } else if (i === 11) {\n                return 0.05 * svg_width + 18 * recs.height - 10;\n              }\n        });\n      }\n    }\n  } // function handleSlideChange(event) {\n\n\n  function handleSlideChange(min, max) {\n    // console.log(\"Slide changed: \" + event.target.value);\n    if (svg) {\n      // setIndexThreshold(event.target.value);\n      // Setting the filter variables\n      setFilterMin(min);\n      setFilterMax(max); // This is the sample color to be displayed. So the user knows what she/he is filtering. What does 10% of cloud mean?? There's a need for a photo there.\n      // // Hard coding colors:\n      // const radiation_filter_factor = event.target.value;\n      // var color = [];\n      // if (radiation_filter_factor < 10) {\n      //   // 1.jpg\n      //   color = [100, 146, 230];\n      // } else if (\n      //   radiation_filter_factor >= 10 &&\n      //   radiation_filter_factor < 20\n      // ) {\n      //   // 2.jpg\n      //   color = [99, 143, 224];\n      // } else if (\n      //   radiation_filter_factor >= 20 &&\n      //   radiation_filter_factor < 30\n      // ) {\n      //   // 3.jpg\n      //   color = [96, 142, 214];\n      // } else if (\n      //   radiation_filter_factor >= 30 &&\n      //   radiation_filter_factor < 40\n      // ) {\n      //   // 4.jpg\n      //   color = [94, 138, 204];\n      // } else if (\n      //   radiation_filter_factor >= 40 &&\n      //   radiation_filter_factor < 50\n      // ) {\n      //   // 5.jpg\n      //   color = [94, 136, 193];\n      // } else if (\n      //   radiation_filter_factor >= 50 &&\n      //   radiation_filter_factor < 60\n      // ) {\n      //   // 6.jpg\n      //   color = [93, 131, 182];\n      // } else if (\n      //   radiation_filter_factor >= 60 &&\n      //   radiation_filter_factor < 70\n      // ) {\n      //   // 7.jpg\n      //   color = [93, 128, 170];\n      // } else if (\n      //   radiation_filter_factor >= 70 &&\n      //   radiation_filter_factor < 80\n      // ) {\n      //   // 8.jpg\n      //   color = [95, 124, 154];\n      // } else if (\n      //   radiation_filter_factor >= 80 &&\n      //   radiation_filter_factor < 90\n      // ) {\n      //   // 9.jpg\n      //   color = [97, 118, 138];\n      // } else if (radiation_filter_factor >= 90) {\n      //   // 10.jpg\n      //   color = [99, 112, 124];\n      // }\n      // // Updating the color of the sample\n      // document.getElementById(\"color_sample\").style.backgroundColor =\n      //   \"rgb(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \")\";\n      // Changing the colors of the squares\n\n      svg.selectAll(\"rect\").transition().duration(800).attr(\"fill\", function (d, i) {\n        var cell_radiation_factor = Math.floor(d.c_index / 10) * 10;\n        var color = []; // If the radiation value of the cell is smaller than the\n        //  radiation velue of the threshold (in the slide), we going\n        //  to fill it with black\n        // if (cell_radiation_factor > radiation_filter_factor) {\n\n        if (cell_radiation_factor < min || cell_radiation_factor > max) {\n          // color = [0, 0, 0];\n          color = [255, 255, 255];\n        } // Otherwise we fill it with the proper color\n        else {\n            if (cell_radiation_factor < 10) {\n              // 1.jpg\n              color = [100, 146, 230];\n            } else if (cell_radiation_factor >= 10 && cell_radiation_factor < 20) {\n              // 2.jpg\n              color = [99, 143, 224];\n            } else if (cell_radiation_factor >= 20 && cell_radiation_factor < 30) {\n              // 3.jpg\n              color = [96, 142, 214];\n            } else if (cell_radiation_factor >= 30 && cell_radiation_factor < 40) {\n              // 4.jpg\n              color = [94, 138, 204];\n            } else if (cell_radiation_factor >= 40 && cell_radiation_factor < 50) {\n              // 5.jpg\n              color = [94, 136, 193];\n            } else if (cell_radiation_factor >= 50 && cell_radiation_factor < 60) {\n              // 6.jpg\n              color = [93, 131, 182];\n            } else if (cell_radiation_factor >= 60 && cell_radiation_factor < 70) {\n              // 7.jpg\n              color = [93, 128, 170];\n            } else if (cell_radiation_factor >= 70 && cell_radiation_factor < 80) {\n              // 8.jpg\n              color = [95, 124, 154];\n            } else if (cell_radiation_factor >= 80 && cell_radiation_factor < 90) {\n              // 9.jpg\n              color = [97, 118, 138];\n            } else if (cell_radiation_factor >= 90) {\n              // 10.jpg\n              color = [99, 112, 124];\n            }\n          }\n\n        return \"rgba(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \", 1)\";\n      });\n    }\n  }\n\n  function handlePlaySong() {\n    setSortMethod(4);\n  } // function handleMouseOverMonthLabel(d, i) {\n\n\n  function handleMouseOverMonthLabel(d, m) {\n    console.log(\"sortMethod [mouseOver]\" + sortMethod);\n\n    if (svg && sortMethod === 1) {\n      let svg_width = svg.style(\"width\").replace(\"px\", \"\"); // REDUCING SIZES BUT NOT REPOSITIONING\n      // // Here we increase the dimensions of the squares\n      // svg\n      //   .selectAll(\"rect\")\n      //   // Here we select only the specific month that the user hovered over.\n      //   .filter(function (d) {\n      //     if (d.month !== monthNames.indexOf(m) + 1) {\n      //       return d;\n      //     }\n      //   })\n      //   .transition()\n      //   .duration(400)\n      //   .attr(\"width\", recs.width / 3)\n      //   .attr(\"height\", recs.height / 3);\n\n      var new_width = recs.width * 1.2;\n      var new_height = recs.height * 1.2;\n      var smaller_width = recs.width / 2.2;\n      var smaller_height = recs.height / 2.2; // TRYING TO REDUCE SIZES\n\n      svg.selectAll(\"rect\").transition().duration(400).attr(\"width\", function (d, i) {\n        if (d.month === monthNames.indexOf(m) + 1) {\n          return recs.width; // keep the same size\n          // return new_width; // increasing\n        } else {\n          return recs.width / 2;\n        }\n      }).attr(\"height\", function (d, i) {\n        if (d.month === monthNames.indexOf(m) + 1) {\n          return recs.height; // keep the same size\n          // return new_height;\n        } else {\n          return recs.height / 2;\n        }\n      }).attr(\"x\", function (d, i) {\n        // If it's the month selected\n        if (d.month === monthNames.indexOf(m) + 1) {\n          return i % nRecsPerRow * (recs.width + gridGap.x) + 0.15 * svg_width;\n        } else {\n          return i % nRecsPerRow * (recs.width + gridGap.x) + 0.15 * svg_width + (recs.width / 2 - smaller_width / 2) // centralizing\n          ;\n        }\n      }).attr(\"y\", function (d, i) {\n        if (d.month === monthNames.indexOf(m) + 1) {\n          return Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) + 0.15 * svg_width;\n        } else {\n          return Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) + 0.15 * svg_width + (recs.height / 2 - smaller_height / 2) // centralizing\n          ;\n        }\n      }); // TRYING TO INCREASE SIZES\n      // svg\n      //   .selectAll(\"rect\")\n      //   .transition()\n      //   .duration(400)\n      //   .attr(\"width\", function (d, i) {\n      //     if (d.month === monthNames.indexOf(m) + 1) {\n      //       return new_width;\n      //     } else {\n      //       return recs.width;\n      //     }\n      //   })\n      //   .attr(\"height\", function (d, i) {\n      //     if (d.month === monthNames.indexOf(m) + 1) {\n      //       return new_height;\n      //     } else {\n      //       return recs.height;\n      //     }\n      //   });\n      // .attr(\"x\", function (d, i) {\n      //   // If it's the month selected\n      //   if (d.month === monthNames.indexOf(m) + 1) {\n      //     return (\n      //       (i % nRecsPerRow) * (new_width + gridGap.x) + 0.15 * svg_width\n      //     );\n      //   } else {\n      //     return (\n      //       (i % nRecsPerRow) * (recs.width + gridGap.x) + 0.15 * svg_width\n      //     );\n      //   }\n      // })\n      // .attr(\"y\", function (d, i) {\n      //   if (d.month === monthNames.indexOf(m) + 1) {\n      //     return (\n      //       Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n      //       0.15 * svg_width\n      //     );\n      //   } else {\n      //     return (\n      //       Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n      //       0.15 * svg_width\n      //     );\n      //   }\n      // });\n    }\n  }\n\n  function handleMouseOutMonthLabel(d, m) {\n    if (svg && sortMethod === 1) {\n      // Here we get the squares back to their initial dimensions\n      // svg\n      //   .selectAll(\"rect\")\n      //   // Here we select only the specific month that the user hovered over.\n      //   .filter(function (d) {\n      //     if (d.month !== monthNames.indexOf(m) + 1) {\n      //       return d;\n      //     }\n      //   })\n      //   .transition()\n      //   .duration(200)\n      //   .attr(\"width\", recs.width)\n      //   .attr(\"height\", recs.height);\n      let svg_width = svg.style(\"width\").replace(\"px\", \"\"); // TRYING TO REDUCE SIZES (Getting back to normal sizes and position)\n\n      svg.selectAll(\"rect\").transition().duration(400).attr(\"width\", function (d, i) {\n        return recs.width;\n      }).attr(\"height\", function (d, i) {\n        return recs.height;\n      }).attr(\"x\", function (d, i) {\n        return i % nRecsPerRow * (recs.width + gridGap.x) + 0.15 * svg_width;\n      }).attr(\"y\", function (d, i) {\n        return Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) + 0.15 * svg_width;\n      }); // svg\n      //   .selectAll(\"rect\")\n      //   .transition()\n      //   .duration(400)\n      //   .attr(\"width\", function (d, i) {\n      //     return recs.width;\n      //   })\n      //   .attr(\"height\", function (d, i) {\n      //     return recs.height;\n      //   });\n      // // .attr(\"x\", function (d, i) {\n      // //   return (\n      // //     (i % nRecsPerRow) * (recs.width + gridGap.x) + 0.15 * svg_width\n      // //   );\n      // // })\n      // // .attr(\"y\", function (d, i) {\n      // //   return (\n      // //     Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n      // //     0.15 * svg_width\n      // //   );\n      // // });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid_controlers\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: sortMethod === 2 ? \"sortingButton selectedButton\" : \"sortingButton\",\n          onClick: handleSortLight,\n          children: \"Sort Light\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1002,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: sortMethod === 1 ? \"sortingButton selectedButton\" : \"sortingButton\",\n          onClick: handleSortDay,\n          children: \"Sort Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1012,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: sortMethod === 3 ? \"sortingButton selectedButton\" : \"sortingButton\",\n          onClick: handleSortMonth,\n          children: \"Group Months\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1022,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: sortMethod === 4 ? \"sortingButton selectedButton musicSymbol\" : \"sortingButton musicSymbol\",\n          onClick: handlePlaySong,\n          children: \"\\u266B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1032,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1001,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slidecontainer\",\n        children: /*#__PURE__*/_jsxDEV(MultiRangeSlider, {\n          min: 0,\n          max: 100,\n          onChange: handleSlideChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1045,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1044,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1000,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d3Container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: d3Grid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1063,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1062,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 999,\n    columnNumber: 5\n  }, this);\n}\n\n_s(D3YearGrid, \"IMYHY/gleUgifa3SUAryJwrFX0k=\");\n\n_c = D3YearGrid;\nexport default D3YearGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"D3YearGrid\");","map":{"version":3,"sources":["/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/D3YearGrid.jsx"],"names":["React","useEffect","useRef","useState","d3","getYear","MultiRangeSlider","D3YearGrid","props","d3Grid","sortMethod","setSortMethod","svg","setSvg","recs","setRecs","nRecsPerRow","setNRecsPerRow","gridGap","setGridGap","monthsLength","setMonthsLength","filterMin","setFilterMin","filterMax","setFilterMax","monthNames","setMonthNames","console","log","margin","top","right","bottom","left","width","parseInt","select","style","svg_width","height","svg_temp","current","attr","gridGapX","gridGapY","x","y","n_recs_per_row","rec_w","Math","floor","rec_h","replace","selectAll","data","enter","append","d","i","bright_color","dark_color","factor","c_index","color","html","day_number","text","on","handleMouseOverMonthLabel","handleMouseOutMonthLabel","length","handleSortLight","sort","ascending","transition","duration","handleSortDay","handleSortMonth","summedDaysPreviousMonth","m","month","handleSlideChange","min","max","cell_radiation_factor","handlePlaySong","new_width","new_height","smaller_width","smaller_height","indexOf"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nimport { getYear } from \"../services/cloud_data_functions\";\n\nimport \"../css/D3YearGrid.css\";\n\nimport MultiRangeSlider from \"./MultiRangeSlider\";\n\nfunction D3YearGrid(props) {\n  const d3Grid = useRef();\n  // const [data, setData] = useState([]);\n\n  // 1 = day_number\n  // 2 = radiation/c_index\n  // 3 = months\n  // 4 = play song\n  const [sortMethod, setSortMethod] = useState(1);\n  const [svg, setSvg] = useState(null);\n  const [recs, setRecs] = useState({});\n  const [nRecsPerRow, setNRecsPerRow] = useState(null);\n  const [gridGap, setGridGap] = useState({});\n  const [monthsLength, setMonthsLength] = useState({});\n  // const [indexThreshold, setIndexThreshold] = useState(100);\n  const [filterMin, setFilterMin] = useState(0);\n  const [filterMax, setFilterMax] = useState(100);\n  const [monthNames, setMonthNames] = useState([\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ]);\n\n  useEffect(() => {\n    console.log(\"useEffect 1\");\n    // The data should be all ready when we load this component :)\n    // console.log(\"Inside D3YearGrid!\");\n    // console.log(props.data);\n    // console.log(\"year: \" + props.year);\n\n    const margin = { top: 0, right: 0, bottom: 0, left: 0 };\n    const width = parseInt(d3.select(\".d3Container\").style(\"width\"));\n    // const height = parseInt(d3.select(\".d3Container\").style(\"height\"));\n    var svg_width = width - margin.left - margin.right;\n    const height = 1 * width;\n    // const gridGapX = 0;\n    // const gridGapY = 0;\n    // setGridGap({ x: gridGapX, y: gridGapY });\n\n    // set up the svg\n    const svg_temp = d3\n      .select(d3Grid.current)\n      .attr(\"width\", width - margin.left - margin.right)\n      .attr(\"height\", height - margin.top - margin.bottom)\n      .attr(\"class\", \"D3Svg\")\n      // .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    setSvg(svg_temp);\n\n    const gridGapX = 0;\n    const gridGapY = 0;\n    setGridGap({ x: gridGapX, y: gridGapY });\n\n    var n_recs_per_row = 20;\n    setNRecsPerRow(n_recs_per_row);\n\n    var rec_w = Math.floor((0.7 * svg_width) / n_recs_per_row);\n    var rec_h = rec_w;\n    setRecs({ width: rec_w, height: rec_h });\n  }, []);\n\n  // Once the svg state has been updated.\n  useEffect(() => {\n    console.log(\"useEffect 2\");\n\n    // At the beginning of this hook component, we define svg (const [svg, setSvg] = useState(null);)\n    // So this function here will be called. That's why we have to check whether there's a 'svg' before\n    // we try to proceed\n    if (svg && recs && nRecsPerRow && gridGap) {\n      let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n\n      // Add the rectangles\n      svg\n        .selectAll(\"rect\") // There's no 'rect' to select. But this is how we do to fill the svg with 'rects'.\n        .data(props.data) // here we load the data\n        .enter()\n        .append(\"rect\") // .enter().append() -> for each datapoint in the dataset, add a 'rect'.\n        .attr(\"width\", recs.width)\n        .attr(\"height\", recs.height)\n        .attr(\"x\", function (d, i) {\n          return (\n            (i % nRecsPerRow) * (recs.width + gridGap.x) + 0.15 * svg_width\n          );\n        })\n        .attr(\"y\", function (d, i) {\n          return (\n            Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n            0.15 * svg_width\n          );\n        })\n        .attr(\"fill\", function (d, i) {\n          var bright_color = [100, 146, 230];\n          var dark_color = [99, 112, 124];\n\n          var factor = Math.floor(d.c_index / 10) * 10;\n\n          // hard coding colors:\n          var color = [];\n          if (factor < 10) {\n            // 1.jpg\n            color = [100, 146, 230];\n          } else if (factor >= 10 && factor < 20) {\n            // 2.jpg\n            color = [99, 143, 224];\n          } else if (factor >= 20 && factor < 30) {\n            // 3.jpg\n            color = [96, 142, 214];\n          } else if (factor >= 30 && factor < 40) {\n            // 4.jpg\n            color = [94, 138, 204];\n          } else if (factor >= 40 && factor < 50) {\n            // 5.jpg\n            color = [94, 136, 193];\n          } else if (factor >= 50 && factor < 60) {\n            // 6.jpg\n            color = [93, 131, 182];\n          } else if (factor >= 60 && factor < 70) {\n            // 7.jpg\n            color = [93, 128, 170];\n          } else if (factor >= 70 && factor < 80) {\n            // 8.jpg\n            color = [95, 124, 154];\n          } else if (factor >= 80 && factor < 90) {\n            // 9.jpg\n            color = [97, 118, 138];\n          } else if (factor >= 90) {\n            // 10.jpg\n            color = [99, 112, 124];\n          }\n          return \"rgba(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \", 1)\";\n        })\n        .style(\"stroke-opacity\", 1) // set the stroke opacity\n        .style(\"stroke\", \"black\") // set the line colour\n        .style(\"stroke-width\", 0.5) // set the stroke width\n\n        .html(function (d, i) {\n          return d.day_number;\n        });\n\n      // Adding month labels\n      svg\n        .selectAll(\"text\")\n        .data(monthNames)\n        .enter()\n        .append(\"text\")\n        .text(function (d) {\n          return d;\n        })\n        .attr(\"x\", 10)\n        .attr(\"y\", function (d, i) {\n          return 97 + i * 33.5;\n        })\n        // .style(\"font-size\", \"12px\")\n        .attr(\"class\", \"monthLabel\")\n        // .style(\"fill\", \"rgb(150,150,150)\")\n        .on(\"mouseover\", handleMouseOverMonthLabel)\n        .on(\"mouseout\", handleMouseOutMonthLabel);\n\n      // We need to check if the year is a leap year because in that case the month\n      // of february has 29 days instead of 28. This will be essential for sorting\n      // the months visually.\n\n      if (props.data.length === 366) {\n        setMonthsLength({\n          1: 31,\n          2: 29, // February has 29 days in leap years\n          3: 31,\n          4: 30,\n          5: 31,\n          6: 30,\n          7: 31,\n          8: 31,\n          9: 30,\n          10: 31,\n          11: 30,\n          12: 31,\n        });\n      } else if (props.data.length === 365) {\n        setMonthsLength({\n          1: 31,\n          2: 28, // February has 28 days in non-leap years\n          3: 31,\n          4: 30,\n          5: 31,\n          6: 30,\n          7: 31,\n          8: 31,\n          9: 30,\n          10: 31,\n          11: 30,\n          12: 31,\n        });\n      }\n    }\n  }, [svg, recs, nRecsPerRow, gridGap]);\n\n  function handleSortLight() {\n    // console.log(\"Sort Light\");\n\n    if (sortMethod !== 2) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n\n        svg\n          .selectAll(\"rect\")\n          .sort(function (x, y) {\n            return d3.ascending(x.c_index, y.c_index);\n          })\n          .transition()\n          .duration(2000)\n          .attr(\"width\", recs.width)\n          .attr(\"height\", recs.height)\n          .attr(\"x\", function (d, i) {\n            return (\n              (i % nRecsPerRow) * (recs.width + gridGap.x) + 0.15 * svg_width\n            );\n          })\n          .attr(\"y\", function (d, i) {\n            // console.log(Math.floor(i / 33));\n            return (\n              Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n              0.15 * svg_width\n            );\n          });\n\n        // Hiding month labels\n        svg\n          .selectAll(\"text\")\n          .transition()\n          .duration(2000)\n          .attr(\"x\", -150)\n          .attr(\"y\", function (d, i) {\n            return 97 + i * 33.5;\n          });\n      }\n\n      setSortMethod(2);\n    }\n  }\n\n  function handleSortDay() {\n    // console.log(\"Sort Day\");\n\n    if (sortMethod !== 1) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        setSortMethod(1);\n\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n\n        svg\n          .selectAll(\"rect\")\n          .sort(function (x, y) {\n            return d3.ascending(x.day_number, y.day_number);\n          })\n          .transition()\n          .duration(2000)\n          .attr(\"width\", recs.width)\n          .attr(\"height\", recs.height)\n          .attr(\"x\", function (d, i) {\n            return (\n              (i % nRecsPerRow) * (recs.width + gridGap.x) + 0.15 * svg_width\n            );\n          })\n          .attr(\"y\", function (d, i) {\n            // console.log(Math.floor(i / 33));\n            return (\n              Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n              0.15 * svg_width\n            );\n          });\n\n        // Hiding month labels\n        svg\n          .selectAll(\"text\")\n          .transition()\n          .duration(2000)\n          .attr(\"x\", 10)\n          .attr(\"y\", function (d, i) {\n            return 97 + i * 33.5;\n          });\n      }\n    }\n  }\n\n  function handleSortMonth() {\n    console.log(\"Sort Month\");\n\n    if (sortMethod !== 3) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        setSortMethod(3);\n\n        console.log(\"Group Month!\");\n\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n\n        svg\n          .selectAll(\"rect\")\n          .sort(function (x, y) {\n            return d3.ascending(x.day_number, y.day_number);\n          })\n          .transition()\n          .duration(2000)\n          .attr(\"width\", recs.width)\n          .attr(\"height\", recs.height)\n          .attr(\"x\", function (d, i) {\n            // This will be useful for knowing how to distribute the\n            //  squares in months. We'll need this logic becausse there are\n            //  leap years, where the month of February has 29 days.\n            let summedDaysPreviousMonth = 0;\n            for (let m = 1; m < d.month; m++) {\n              summedDaysPreviousMonth += monthsLength[m];\n            }\n\n            // January\n            if (d.month === 1) {\n              return (i % 6) * recs.width + 0.05 * svg_width;\n            }\n\n            // February\n            else if (d.month === 2) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                7 * recs.width\n              );\n            }\n\n            // March\n            else if (d.month === 3) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                14 * recs.width\n              );\n            }\n\n            // April\n            else if (d.month === 4) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                21 * recs.width\n              );\n            }\n\n            // May\n            else if (d.month === 5) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width\n              );\n            }\n\n            // Jun\n            else if (d.month === 6) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                7 * recs.width\n              );\n            }\n\n            // July\n            else if (d.month === 7) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                14 * recs.width\n              );\n            }\n\n            // August\n            else if (d.month === 8) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                21 * recs.width\n              );\n            }\n\n            // September\n            else if (d.month === 9) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width\n              );\n            }\n\n            // October\n            else if (d.month === 10) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                7 * recs.width\n              );\n            }\n\n            // November\n            else if (d.month === 11) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                14 * recs.width\n              );\n            }\n\n            // December\n            else if (d.month === 12) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                21 * recs.width\n              );\n            } else {\n              return 500;\n            }\n          })\n          .attr(\"y\", function (d, i) {\n            // This will be useful for knowing how to distribute the\n            //  squares in months. We'll need this logic becausse there are\n            //  leap years, where the month of February has 29 days.\n            let summedDaysPreviousMonth = 0;\n            for (let m = 1; m < d.month; m++) {\n              summedDaysPreviousMonth += monthsLength[m];\n            }\n\n            // January\n            if (d.month === 1) {\n              return Math.floor(i / 6) * recs.height + 0.05 * svg_width;\n            }\n\n            // February\n            else if (d.month === 2) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width\n              );\n            }\n\n            // March\n            else if (d.month === 3) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width\n              );\n            }\n\n            // April\n            else if (d.month === 4) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width\n              );\n            }\n\n            // May\n            else if (d.month === 5) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                9 * recs.height\n              );\n            }\n\n            // June\n            else if (d.month === 6) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                9 * recs.height\n              );\n            }\n\n            // July\n            else if (d.month === 7) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                9 * recs.height\n              );\n            }\n\n            // August\n            else if (d.month === 8) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                9 * recs.height\n              );\n            }\n\n            // September\n            else if (d.month === 9) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                18 * recs.height\n              );\n            }\n\n            // October\n            else if (d.month === 10) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                18 * recs.height\n              );\n            }\n\n            // November\n            else if (d.month === 11) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                18 * recs.height\n              );\n            }\n\n            // Dececmber\n            else if (d.month === 12) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                18 * recs.height\n              );\n            }\n          });\n\n        // Writing months names\n        svg\n          .selectAll(\"text\")\n          .transition()\n          .duration(2000)\n          .attr(\"x\", function (d, i) {\n            // if (d === \"January\") {\n            if (i === 0) {\n              return 0.05 * svg_width;\n              // } else if (d === \"February\") {\n            } else if (i === 1) {\n              return 0.05 * svg_width + 7 * recs.width;\n              // } else if (d === \"March\") {\n            } else if (i === 2) {\n              return 0.05 * svg_width + 14 * recs.width;\n              // } else if (d === \"April\") {\n            } else if (i === 3) {\n              return 0.05 * svg_width + 21 * recs.width;\n            }\n            // 2nd row\n            // else if (d === \"May\") {\n            else if (i === 4) {\n              return 0.05 * svg_width;\n              // } else if (d === \"June\") {\n            } else if (i === 5) {\n              return 0.05 * svg_width + 7 * recs.width;\n              // } else if (d === \"July\") {\n            } else if (i === 6) {\n              return 0.05 * svg_width + 14 * recs.width;\n              // } else if (d === \"August\") {\n            } else if (i === 7) {\n              return 0.05 * svg_width + 21 * recs.width;\n            }\n            // 3rd row\n            // else if (d === \"September\") {\n            else if (i === 8) {\n              return 0.05 * svg_width;\n              // } else if (d === \"October\") {\n            } else if (i === 9) {\n              return 0.05 * svg_width + 7 * recs.width;\n              // } else if (d === \"November\") {\n            } else if (i === 10) {\n              return 0.05 * svg_width + 14 * recs.width;\n              // } else if (d === \"December\") {\n            } else if (i === 11) {\n              return 0.05 * svg_width + 21 * recs.width;\n            }\n          })\n          .attr(\"y\", function (d, i) {\n            // if (d === \"January\") {\n            if (i === 0) {\n              return 0.05 * svg_width - 10;\n              // } else if (d === \"February\") {\n            } else if (i === 1) {\n              return 0.05 * svg_width - 10;\n              // } else if (d === \"March\") {\n            } else if (i === 2) {\n              return 0.05 * svg_width - 10;\n              // } else if (d === \"April\") {\n            } else if (i === 3) {\n              return 0.05 * svg_width - 10;\n            }\n\n            // 2nd row\n            // else if (d === \"May\") {\n            else if (i === 4) {\n              return 0.05 * svg_width + 9 * recs.height - 10;\n              // } else if (d === \"June\") {\n            } else if (i === 5) {\n              return 0.05 * svg_width + 9 * recs.height - 10;\n              // } else if (d === \"July\") {\n            } else if (i === 6) {\n              return 0.05 * svg_width + 9 * recs.height - 10;\n              // } else if (d === \"August\") {\n            } else if (i === 7) {\n              return 0.05 * svg_width + 9 * recs.height - 10;\n            }\n            // 3rd row\n            // else if (d === \"September\") {\n            else if (i === 8) {\n              return 0.05 * svg_width + 18 * recs.height - 10;\n              // } else if (d === \"October\") {\n            } else if (i === 9) {\n              return 0.05 * svg_width + 18 * recs.height - 10;\n              // } else if (d === \"November\") {\n            } else if (i === 10) {\n              return 0.05 * svg_width + 18 * recs.height - 10;\n              // } else if (d === \"December\") {\n            } else if (i === 11) {\n              return 0.05 * svg_width + 18 * recs.height - 10;\n            }\n          });\n      }\n    }\n  }\n\n  // function handleSlideChange(event) {\n  function handleSlideChange(min, max) {\n    // console.log(\"Slide changed: \" + event.target.value);\n\n    if (svg) {\n      // setIndexThreshold(event.target.value);\n\n      // Setting the filter variables\n      setFilterMin(min);\n      setFilterMax(max);\n\n      // This is the sample color to be displayed. So the user knows what she/he is filtering. What does 10% of cloud mean?? There's a need for a photo there.\n      // // Hard coding colors:\n      // const radiation_filter_factor = event.target.value;\n\n      // var color = [];\n      // if (radiation_filter_factor < 10) {\n      //   // 1.jpg\n      //   color = [100, 146, 230];\n      // } else if (\n      //   radiation_filter_factor >= 10 &&\n      //   radiation_filter_factor < 20\n      // ) {\n      //   // 2.jpg\n      //   color = [99, 143, 224];\n      // } else if (\n      //   radiation_filter_factor >= 20 &&\n      //   radiation_filter_factor < 30\n      // ) {\n      //   // 3.jpg\n      //   color = [96, 142, 214];\n      // } else if (\n      //   radiation_filter_factor >= 30 &&\n      //   radiation_filter_factor < 40\n      // ) {\n      //   // 4.jpg\n      //   color = [94, 138, 204];\n      // } else if (\n      //   radiation_filter_factor >= 40 &&\n      //   radiation_filter_factor < 50\n      // ) {\n      //   // 5.jpg\n      //   color = [94, 136, 193];\n      // } else if (\n      //   radiation_filter_factor >= 50 &&\n      //   radiation_filter_factor < 60\n      // ) {\n      //   // 6.jpg\n      //   color = [93, 131, 182];\n      // } else if (\n      //   radiation_filter_factor >= 60 &&\n      //   radiation_filter_factor < 70\n      // ) {\n      //   // 7.jpg\n      //   color = [93, 128, 170];\n      // } else if (\n      //   radiation_filter_factor >= 70 &&\n      //   radiation_filter_factor < 80\n      // ) {\n      //   // 8.jpg\n      //   color = [95, 124, 154];\n      // } else if (\n      //   radiation_filter_factor >= 80 &&\n      //   radiation_filter_factor < 90\n      // ) {\n      //   // 9.jpg\n      //   color = [97, 118, 138];\n      // } else if (radiation_filter_factor >= 90) {\n      //   // 10.jpg\n      //   color = [99, 112, 124];\n      // }\n      // // Updating the color of the sample\n      // document.getElementById(\"color_sample\").style.backgroundColor =\n      //   \"rgb(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \")\";\n\n      // Changing the colors of the squares\n      svg\n        .selectAll(\"rect\")\n        .transition()\n        .duration(800)\n        .attr(\"fill\", function (d, i) {\n          var cell_radiation_factor = Math.floor(d.c_index / 10) * 10;\n\n          var color = [];\n\n          // If the radiation value of the cell is smaller than the\n          //  radiation velue of the threshold (in the slide), we going\n          //  to fill it with black\n          // if (cell_radiation_factor > radiation_filter_factor) {\n          if (cell_radiation_factor < min || cell_radiation_factor > max) {\n            // color = [0, 0, 0];\n            color = [255, 255, 255];\n          }\n          // Otherwise we fill it with the proper color\n          else {\n            if (cell_radiation_factor < 10) {\n              // 1.jpg\n              color = [100, 146, 230];\n            } else if (\n              cell_radiation_factor >= 10 &&\n              cell_radiation_factor < 20\n            ) {\n              // 2.jpg\n              color = [99, 143, 224];\n            } else if (\n              cell_radiation_factor >= 20 &&\n              cell_radiation_factor < 30\n            ) {\n              // 3.jpg\n              color = [96, 142, 214];\n            } else if (\n              cell_radiation_factor >= 30 &&\n              cell_radiation_factor < 40\n            ) {\n              // 4.jpg\n              color = [94, 138, 204];\n            } else if (\n              cell_radiation_factor >= 40 &&\n              cell_radiation_factor < 50\n            ) {\n              // 5.jpg\n              color = [94, 136, 193];\n            } else if (\n              cell_radiation_factor >= 50 &&\n              cell_radiation_factor < 60\n            ) {\n              // 6.jpg\n              color = [93, 131, 182];\n            } else if (\n              cell_radiation_factor >= 60 &&\n              cell_radiation_factor < 70\n            ) {\n              // 7.jpg\n              color = [93, 128, 170];\n            } else if (\n              cell_radiation_factor >= 70 &&\n              cell_radiation_factor < 80\n            ) {\n              // 8.jpg\n              color = [95, 124, 154];\n            } else if (\n              cell_radiation_factor >= 80 &&\n              cell_radiation_factor < 90\n            ) {\n              // 9.jpg\n              color = [97, 118, 138];\n            } else if (cell_radiation_factor >= 90) {\n              // 10.jpg\n              color = [99, 112, 124];\n            }\n          }\n\n          return \"rgba(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \", 1)\";\n        });\n    }\n  }\n\n  function handlePlaySong() {\n    setSortMethod(4);\n  }\n\n  // function handleMouseOverMonthLabel(d, i) {\n  function handleMouseOverMonthLabel(d, m) {\n    console.log(\"sortMethod [mouseOver]\" + sortMethod);\n\n    if (svg && sortMethod === 1) {\n      let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n\n      // REDUCING SIZES BUT NOT REPOSITIONING\n      // // Here we increase the dimensions of the squares\n      // svg\n      //   .selectAll(\"rect\")\n      //   // Here we select only the specific month that the user hovered over.\n      //   .filter(function (d) {\n      //     if (d.month !== monthNames.indexOf(m) + 1) {\n      //       return d;\n      //     }\n      //   })\n      //   .transition()\n      //   .duration(400)\n      //   .attr(\"width\", recs.width / 3)\n      //   .attr(\"height\", recs.height / 3);\n\n      var new_width = recs.width * 1.2;\n      var new_height = recs.height * 1.2;\n\n      var smaller_width = recs.width / 2.2;\n      var smaller_height = recs.height / 2.2;\n\n      // TRYING TO REDUCE SIZES\n      svg\n        .selectAll(\"rect\")\n        .transition()\n        .duration(400)\n        .attr(\"width\", function (d, i) {\n          if (d.month === monthNames.indexOf(m) + 1) {\n            return recs.width; // keep the same size\n            // return new_width; // increasing\n          } else {\n            return recs.width / 2;\n          }\n        })\n        .attr(\"height\", function (d, i) {\n          if (d.month === monthNames.indexOf(m) + 1) {\n            return recs.height; // keep the same size\n            // return new_height;\n          } else {\n            return recs.height / 2;\n          }\n        })\n        .attr(\"x\", function (d, i) {\n          // If it's the month selected\n          if (d.month === monthNames.indexOf(m) + 1) {\n            return (\n              (i % nRecsPerRow) * (recs.width + gridGap.x) + 0.15 * svg_width\n            );\n          } else {\n            return (\n              (i % nRecsPerRow) * (recs.width + gridGap.x) +\n              0.15 * svg_width +\n              (recs.width / 2 - smaller_width / 2) // centralizing\n            );\n          }\n        })\n        .attr(\"y\", function (d, i) {\n          if (d.month === monthNames.indexOf(m) + 1) {\n            return (\n              Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n              0.15 * svg_width\n            );\n          } else {\n            return (\n              Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n              0.15 * svg_width +\n              (recs.height / 2 - smaller_height / 2) // centralizing\n            );\n          }\n        });\n\n      // TRYING TO INCREASE SIZES\n      // svg\n      //   .selectAll(\"rect\")\n      //   .transition()\n      //   .duration(400)\n      //   .attr(\"width\", function (d, i) {\n      //     if (d.month === monthNames.indexOf(m) + 1) {\n      //       return new_width;\n      //     } else {\n      //       return recs.width;\n      //     }\n      //   })\n      //   .attr(\"height\", function (d, i) {\n      //     if (d.month === monthNames.indexOf(m) + 1) {\n      //       return new_height;\n      //     } else {\n      //       return recs.height;\n      //     }\n      //   });\n      // .attr(\"x\", function (d, i) {\n      //   // If it's the month selected\n      //   if (d.month === monthNames.indexOf(m) + 1) {\n      //     return (\n      //       (i % nRecsPerRow) * (new_width + gridGap.x) + 0.15 * svg_width\n      //     );\n      //   } else {\n      //     return (\n      //       (i % nRecsPerRow) * (recs.width + gridGap.x) + 0.15 * svg_width\n      //     );\n      //   }\n      // })\n      // .attr(\"y\", function (d, i) {\n      //   if (d.month === monthNames.indexOf(m) + 1) {\n      //     return (\n      //       Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n      //       0.15 * svg_width\n      //     );\n      //   } else {\n      //     return (\n      //       Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n      //       0.15 * svg_width\n      //     );\n      //   }\n      // });\n    }\n  }\n\n  function handleMouseOutMonthLabel(d, m) {\n    if (svg && sortMethod === 1) {\n      // Here we get the squares back to their initial dimensions\n      // svg\n      //   .selectAll(\"rect\")\n      //   // Here we select only the specific month that the user hovered over.\n      //   .filter(function (d) {\n      //     if (d.month !== monthNames.indexOf(m) + 1) {\n      //       return d;\n      //     }\n      //   })\n      //   .transition()\n      //   .duration(200)\n      //   .attr(\"width\", recs.width)\n      //   .attr(\"height\", recs.height);\n\n      let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n\n      // TRYING TO REDUCE SIZES (Getting back to normal sizes and position)\n      svg\n        .selectAll(\"rect\")\n        .transition()\n        .duration(400)\n        .attr(\"width\", function (d, i) {\n          return recs.width;\n        })\n        .attr(\"height\", function (d, i) {\n          return recs.height;\n        })\n        .attr(\"x\", function (d, i) {\n          return (\n            (i % nRecsPerRow) * (recs.width + gridGap.x) + 0.15 * svg_width\n          );\n        })\n        .attr(\"y\", function (d, i) {\n          return (\n            Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n            0.15 * svg_width\n          );\n        });\n\n      // svg\n      //   .selectAll(\"rect\")\n      //   .transition()\n      //   .duration(400)\n      //   .attr(\"width\", function (d, i) {\n      //     return recs.width;\n      //   })\n      //   .attr(\"height\", function (d, i) {\n      //     return recs.height;\n      //   });\n      // // .attr(\"x\", function (d, i) {\n      // //   return (\n      // //     (i % nRecsPerRow) * (recs.width + gridGap.x) + 0.15 * svg_width\n      // //   );\n      // // })\n      // // .attr(\"y\", function (d, i) {\n      // //   return (\n      // //     Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n      // //     0.15 * svg_width\n      // //   );\n      // // });\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"grid_controlers\">\n        <div className=\"buttons\">\n          <button\n            className={\n              sortMethod === 2\n                ? \"sortingButton selectedButton\"\n                : \"sortingButton\"\n            }\n            onClick={handleSortLight}\n          >\n            Sort Light\n          </button>\n          <button\n            className={\n              sortMethod === 1\n                ? \"sortingButton selectedButton\"\n                : \"sortingButton\"\n            }\n            onClick={handleSortDay}\n          >\n            Sort Date\n          </button>\n          <button\n            className={\n              sortMethod === 3\n                ? \"sortingButton selectedButton\"\n                : \"sortingButton\"\n            }\n            onClick={handleSortMonth}\n          >\n            Group Months\n          </button>\n          <button\n            className={\n              sortMethod === 4\n                ? \"sortingButton selectedButton musicSymbol\"\n                : \"sortingButton musicSymbol\"\n            }\n            onClick={handlePlaySong}\n          >\n            &#9835;\n          </button>\n        </div>\n\n        <div className=\"slidecontainer\">\n          <MultiRangeSlider min={0} max={100} onChange={handleSlideChange} />\n        </div>\n        {/* <div className=\"slidecontainer\">\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            defaultValue=\"100\"\n            className=\"slider\"\n            id=\"colorSlider\"\n            onInput={handleSlideChange}\n          />\n          <p id=\"slide_value_p\"> {indexThreshold}</p>\n          <div id=\"color_sample\"></div>\n        </div> */}\n      </div>\n\n      <div className=\"d3Container\">\n        <svg ref={d3Grid}></svg>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default D3YearGrid;\n"]},"metadata":{},"sourceType":"module"}