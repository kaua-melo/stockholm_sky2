{"ast":null,"code":"var _jsxFileName = \"/Users/k1/Desktop/stockholm_sky/app/src/hooks/D3YearGrid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { getYear } from \"../services/cloud_data_functions\";\nimport \"../css/D3YearGrid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction D3YearGrid(props) {\n  _s();\n\n  const d3Grid = useRef();\n  const [data, setData] = useState([]); // 1 = day_number\n  // 2 = radiation/c_index\n  // 3 = months\n\n  const [sortMethod, setSortMethod] = useState(1);\n  const [svg, setSvg] = useState(null);\n  const [recs, setRecs] = useState({});\n  const [nRecsPerRow, setNRecsPerRow] = useState(null);\n  const [gridGap, setGridGap] = useState({});\n  useEffect(() => {\n    // The data should be all ready when we load this component :)\n    // console.log(\"Inside D3YearGrid!\");\n    // console.log(props.data);\n    // console.log(\"year: \" + props.year);\n    const margin = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    };\n    const width = parseInt(d3.select(\".d3Container\").style(\"width\")); // const height = parseInt(d3.select(\".d3Container\").style(\"height\"));\n\n    const height = 1 * width;\n    const gridGapX = 0;\n    const gridGapY = 0;\n    setGridGap({\n      x: gridGapX,\n      y: gridGapY\n    }); // set up the svg\n\n    const svg_temp = d3.select(d3Grid.current).attr(\"width\", width - margin.left - margin.right).attr(\"height\", height - margin.top - margin.bottom).attr(\"class\", \"D3Svg\") // .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    setSvg(svg_temp);\n    var svg_width = width;\n    var n_recs_per_row = 20;\n    var rec_w = Math.floor(0.7 * svg_width / n_recs_per_row);\n    var rec_h = rec_w;\n    setNRecsPerRow(n_recs_per_row);\n    setRecs({\n      width: rec_w,\n      height: rec_h\n    }); // Add the rectangles\n\n    svg_temp.selectAll(\"rect\") // There's no 'rect' to select. But this is how we do to fill the svg with 'rects'.\n    .data(props.data) // here we load the data\n    .enter().append(\"rect\") // .enter().append() -> for each datapoint in the dataset, add a 'rect'.\n    .attr(\"width\", rec_w).attr(\"height\", rec_h).attr(\"x\", function (d, i) {\n      return i % n_recs_per_row * (rec_w + gridGapX) + 0.15 * svg_width;\n    }).attr(\"y\", function (d, i) {\n      return Math.floor(i / n_recs_per_row) * (rec_h + gridGapY) + 0.15 * svg_width;\n    }).attr(\"fill\", function (d, i) {\n      var bright_color = [100, 146, 230];\n      var dark_color = [99, 112, 124];\n      var factor = Math.floor(d.c_index / 10) * 10; // hard coding colors:\n\n      var color = [];\n\n      if (factor < 10) {\n        // 1.jpg\n        color = [100, 146, 230];\n      } else if (factor >= 10 && factor < 20) {\n        // 2.jpg\n        color = [99, 143, 224];\n      } else if (factor >= 20 && factor < 30) {\n        // 3.jpg\n        color = [96, 142, 214];\n      } else if (factor >= 30 && factor < 40) {\n        // 4.jpg\n        color = [94, 138, 204];\n      } else if (factor >= 40 && factor < 50) {\n        // 5.jpg\n        color = [94, 136, 193];\n      } else if (factor >= 50 && factor < 60) {\n        // 6.jpg\n        color = [93, 131, 182];\n      } else if (factor >= 60 && factor < 70) {\n        // 7.jpg\n        color = [93, 128, 170];\n      } else if (factor >= 70 && factor < 80) {\n        // 8.jpg\n        color = [95, 124, 154];\n      } else if (factor >= 80 && factor < 90) {\n        // 9.jpg\n        color = [97, 118, 138];\n      } else if (factor >= 90) {\n        // 10.jpg\n        color = [99, 112, 124];\n      }\n\n      return \"rgba(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \", 1)\";\n    }).html(function (d, i) {\n      return d.day_number;\n    });\n  }, []);\n\n  function handleSortLight() {\n    // console.log(\"Sort Light\");\n    if (sortMethod !== 2) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n        svg.selectAll(\"rect\").sort(function (x, y) {\n          return d3.ascending(x.c_index, y.c_index);\n        }).transition().duration(2000).attr(\"width\", recs.width).attr(\"height\", recs.height).attr(\"x\", function (d, i) {\n          return i % nRecsPerRow * (recs.width + gridGap.x) + 0.15 * svg_width;\n        }).attr(\"y\", function (d, i) {\n          // console.log(Math.floor(i / 33));\n          return Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) + 0.15 * svg_width;\n        });\n      }\n    }\n  }\n\n  function handleSortDay() {\n    // console.log(\"Sort Day\");\n    if (sortMethod !== 1) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n        svg.selectAll(\"rect\").sort(function (x, y) {\n          return d3.ascending(x.day_number, y.day_number);\n        }).transition().duration(2000).attr(\"width\", recs.width).attr(\"height\", recs.height).attr(\"x\", function (d, i) {\n          return i % nRecsPerRow * (recs.width + gridGap.x) + 0.15 * svg_width;\n        }).attr(\"y\", function (d, i) {\n          // console.log(Math.floor(i / 33));\n          return Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) + 0.15 * svg_width;\n        });\n        setSortMethod(1);\n      }\n    }\n  }\n\n  function handleSortMonth() {\n    console.log(\"Sort Month\");\n  }\n\n  function handleSlideChange(event) {// console.log(\"Slide changed: \" + event.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid_controlers\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSortLight,\n        children: \"Sort Light\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSortDay,\n        children: \"Sort Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSortMonth,\n        children: \"Group Months\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slidecontainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: \"100\",\n          defaultValue: \"100\",\n          className: \"slider\",\n          id: \"colorSlider\",\n          onInput: handleSlideChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"slide_value_p\",\n          children: \" 100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"color_sample\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d3Container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: d3Grid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n}\n\n_s(D3YearGrid, \"iCyHS1lkV+NIxmXGwUxPF/wRza0=\");\n\n_c = D3YearGrid;\nexport default D3YearGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"D3YearGrid\");","map":{"version":3,"sources":["/Users/k1/Desktop/stockholm_sky/app/src/hooks/D3YearGrid.jsx"],"names":["React","useEffect","useRef","useState","d3","getYear","D3YearGrid","props","d3Grid","data","setData","sortMethod","setSortMethod","svg","setSvg","recs","setRecs","nRecsPerRow","setNRecsPerRow","gridGap","setGridGap","margin","top","right","bottom","left","width","parseInt","select","style","height","gridGapX","gridGapY","x","y","svg_temp","current","attr","svg_width","n_recs_per_row","rec_w","Math","floor","rec_h","selectAll","enter","append","d","i","bright_color","dark_color","factor","c_index","color","html","day_number","handleSortLight","replace","sort","ascending","transition","duration","handleSortDay","handleSortMonth","console","log","handleSlideChange","event"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nimport { getYear } from \"../services/cloud_data_functions\";\n\nimport \"../css/D3YearGrid.css\";\n\nfunction D3YearGrid(props) {\n  const d3Grid = useRef();\n  const [data, setData] = useState([]);\n  // 1 = day_number\n  // 2 = radiation/c_index\n  // 3 = months\n  const [sortMethod, setSortMethod] = useState(1);\n  const [svg, setSvg] = useState(null);\n  const [recs, setRecs] = useState({});\n  const [nRecsPerRow, setNRecsPerRow] = useState(null);\n  const [gridGap, setGridGap] = useState({});\n\n  useEffect(() => {\n    // The data should be all ready when we load this component :)\n    // console.log(\"Inside D3YearGrid!\");\n    // console.log(props.data);\n    // console.log(\"year: \" + props.year);\n\n    const margin = { top: 0, right: 0, bottom: 0, left: 0 };\n    const width = parseInt(d3.select(\".d3Container\").style(\"width\"));\n    // const height = parseInt(d3.select(\".d3Container\").style(\"height\"));\n    const height = 1 * width;\n    const gridGapX = 0;\n    const gridGapY = 0;\n    setGridGap({ x: gridGapX, y: gridGapY });\n\n    // set up the svg\n    const svg_temp = d3\n      .select(d3Grid.current)\n      .attr(\"width\", width - margin.left - margin.right)\n      .attr(\"height\", height - margin.top - margin.bottom)\n      .attr(\"class\", \"D3Svg\")\n      // .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    setSvg(svg_temp);\n\n    var svg_width = width;\n    var n_recs_per_row = 20;\n    var rec_w = Math.floor((0.7 * svg_width) / n_recs_per_row);\n    var rec_h = rec_w;\n    setNRecsPerRow(n_recs_per_row);\n    setRecs({ width: rec_w, height: rec_h });\n\n    // Add the rectangles\n    svg_temp\n      .selectAll(\"rect\") // There's no 'rect' to select. But this is how we do to fill the svg with 'rects'.\n      .data(props.data) // here we load the data\n      .enter()\n      .append(\"rect\") // .enter().append() -> for each datapoint in the dataset, add a 'rect'.\n      .attr(\"width\", rec_w)\n      .attr(\"height\", rec_h)\n      .attr(\"x\", function (d, i) {\n        return (i % n_recs_per_row) * (rec_w + gridGapX) + 0.15 * svg_width;\n      })\n      .attr(\"y\", function (d, i) {\n        return (\n          Math.floor(i / n_recs_per_row) * (rec_h + gridGapY) + 0.15 * svg_width\n        );\n      })\n      .attr(\"fill\", function (d, i) {\n        var bright_color = [100, 146, 230];\n        var dark_color = [99, 112, 124];\n\n        var factor = Math.floor(d.c_index / 10) * 10;\n\n        // hard coding colors:\n        var color = [];\n        if (factor < 10) {\n          // 1.jpg\n          color = [100, 146, 230];\n        } else if (factor >= 10 && factor < 20) {\n          // 2.jpg\n          color = [99, 143, 224];\n        } else if (factor >= 20 && factor < 30) {\n          // 3.jpg\n          color = [96, 142, 214];\n        } else if (factor >= 30 && factor < 40) {\n          // 4.jpg\n          color = [94, 138, 204];\n        } else if (factor >= 40 && factor < 50) {\n          // 5.jpg\n          color = [94, 136, 193];\n        } else if (factor >= 50 && factor < 60) {\n          // 6.jpg\n          color = [93, 131, 182];\n        } else if (factor >= 60 && factor < 70) {\n          // 7.jpg\n          color = [93, 128, 170];\n        } else if (factor >= 70 && factor < 80) {\n          // 8.jpg\n          color = [95, 124, 154];\n        } else if (factor >= 80 && factor < 90) {\n          // 9.jpg\n          color = [97, 118, 138];\n        } else if (factor >= 90) {\n          // 10.jpg\n          color = [99, 112, 124];\n        }\n        return \"rgba(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \", 1)\";\n      })\n      .html(function (d, i) {\n        return d.day_number;\n      });\n  }, []);\n\n  function handleSortLight() {\n    // console.log(\"Sort Light\");\n\n    if (sortMethod !== 2) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n\n        svg\n          .selectAll(\"rect\")\n          .sort(function (x, y) {\n            return d3.ascending(x.c_index, y.c_index);\n          })\n          .transition()\n          .duration(2000)\n          .attr(\"width\", recs.width)\n          .attr(\"height\", recs.height)\n          .attr(\"x\", function (d, i) {\n            return (\n              (i % nRecsPerRow) * (recs.width + gridGap.x) + 0.15 * svg_width\n            );\n          })\n          .attr(\"y\", function (d, i) {\n            // console.log(Math.floor(i / 33));\n            return (\n              Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n              0.15 * svg_width\n            );\n          });\n      }\n    }\n  }\n\n  function handleSortDay() {\n    // console.log(\"Sort Day\");\n\n    if (sortMethod !== 1) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n\n        svg\n          .selectAll(\"rect\")\n          .sort(function (x, y) {\n            return d3.ascending(x.day_number, y.day_number);\n          })\n          .transition()\n          .duration(2000)\n          .attr(\"width\", recs.width)\n          .attr(\"height\", recs.height)\n          .attr(\"x\", function (d, i) {\n            return (\n              (i % nRecsPerRow) * (recs.width + gridGap.x) + 0.15 * svg_width\n            );\n          })\n          .attr(\"y\", function (d, i) {\n            // console.log(Math.floor(i / 33));\n            return (\n              Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n              0.15 * svg_width\n            );\n          });\n\n        setSortMethod(1);\n      }\n    }\n  }\n\n  function handleSortMonth() {\n    console.log(\"Sort Month\");\n  }\n\n  function handleSlideChange(event) {\n    // console.log(\"Slide changed: \" + event.target.value);\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"grid_controlers\">\n        <button onClick={handleSortLight}>Sort Light</button>\n        <button onClick={handleSortDay}>Sort Date</button>\n        <button onClick={handleSortMonth}>Group Months</button>\n\n        <div className=\"slidecontainer\">\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            defaultValue=\"100\"\n            className=\"slider\"\n            id=\"colorSlider\"\n            onInput={handleSlideChange}\n          />\n          <p id=\"slide_value_p\"> 100</p>\n          <div id=\"color_sample\"></div>\n        </div>\n      </div>\n\n      <div className=\"d3Container\">\n        <svg ref={d3Grid}></svg>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default D3YearGrid;\n"]},"metadata":{},"sourceType":"module"}