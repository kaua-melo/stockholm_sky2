{"ast":null,"code":"var _jsxFileName = \"/Users/k1/Desktop/stockholm_sky/app/src/hooks/D3YearGrid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { getYear } from \"../services/cloud_data_functions\";\nimport \"../css/D3YearGrid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction D3YearGrid(props) {\n  _s();\n\n  const d3Grid = useRef();\n  const [data, setData] = useState([]); // 1 = day_number\n  // 2 = radiation/c_index\n  // 3 = months\n\n  const [sortMethod, setSortMethod] = useState(1);\n  const [svg, setSvg] = useState(null);\n  const [recs, setRecs] = useState({});\n  const [nRecsPerRow, setNRecsPerRow] = useState(null);\n  const [gridGap, setGridGap] = useState({});\n  useEffect(() => {\n    // The data should be all ready when we load this component :)\n    // console.log(\"Inside D3YearGrid!\");\n    // console.log(props.data);\n    // console.log(\"year: \" + props.year);\n    const margin = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    };\n    const width = parseInt(d3.select(\".d3Container\").style(\"width\")); // const height = parseInt(d3.select(\".d3Container\").style(\"height\"));\n\n    const height = 1 * width;\n    const gridGapX = 0;\n    const gridGapY = 0;\n    setGridGap({\n      x: gridGapX,\n      y: gridGapY\n    }); // set up the svg\n\n    const svg_temp = d3.select(d3Grid.current).attr(\"width\", width - margin.left - margin.right).attr(\"height\", height - margin.top - margin.bottom).attr(\"class\", \"D3Svg\") // .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    setSvg(svg_temp);\n    var svg_width = width;\n    var n_recs_per_row = 20;\n    var rec_w = Math.floor(0.7 * svg_width / n_recs_per_row);\n    var rec_h = rec_w;\n    setNRecsPerRow(n_recs_per_row);\n    setRecs({\n      width: rec_w,\n      height: rec_h\n    }); // Add the rectangles\n\n    svg_temp.selectAll(\"rect\") // There's no 'rect' to select. But this is how we do to fill the svg with 'rects'.\n    .data(props.data) // here we load the data\n    .enter().append(\"rect\") // .enter().append() -> for each datapoint in the dataset, add a 'rect'.\n    .attr(\"width\", rec_w).attr(\"height\", rec_h).attr(\"x\", function (d, i) {\n      return i % n_recs_per_row * (rec_w + gridGapX) + 0.15 * svg_width;\n    }).attr(\"y\", function (d, i) {\n      return Math.floor(i / n_recs_per_row) * (rec_h + gridGapY) + 0.15 * svg_width;\n    }).attr(\"fill\", function (d, i) {\n      var bright_color = [100, 146, 230];\n      var dark_color = [99, 112, 124];\n      var factor = Math.floor(d.c_index / 10) * 10; // hard coding colors:\n\n      var color = [];\n\n      if (factor < 10) {\n        // 1.jpg\n        color = [100, 146, 230];\n      } else if (factor >= 10 && factor < 20) {\n        // 2.jpg\n        color = [99, 143, 224];\n      } else if (factor >= 20 && factor < 30) {\n        // 3.jpg\n        color = [96, 142, 214];\n      } else if (factor >= 30 && factor < 40) {\n        // 4.jpg\n        color = [94, 138, 204];\n      } else if (factor >= 40 && factor < 50) {\n        // 5.jpg\n        color = [94, 136, 193];\n      } else if (factor >= 50 && factor < 60) {\n        // 6.jpg\n        color = [93, 131, 182];\n      } else if (factor >= 60 && factor < 70) {\n        // 7.jpg\n        color = [93, 128, 170];\n      } else if (factor >= 70 && factor < 80) {\n        // 8.jpg\n        color = [95, 124, 154];\n      } else if (factor >= 80 && factor < 90) {\n        // 9.jpg\n        color = [97, 118, 138];\n      } else if (factor >= 90) {\n        // 10.jpg\n        color = [99, 112, 124];\n      }\n\n      return \"rgba(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \", 1)\";\n    }).html(function (d, i) {\n      return d.day_number;\n    });\n  }, []);\n\n  function handleSortLight() {\n    // console.log(\"Sort Light\");\n    if (sortMethod !== 2) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n        svg.selectAll(\"rect\").sort(function (x, y) {\n          return d3.ascending(x.c_index, y.c_index);\n        }).transition().duration(2000).attr(\"width\", recs.width).attr(\"height\", recs.height).attr(\"x\", function (d, i) {\n          return i % nRecsPerRow * (recs.width + gridGap.x) + 0.15 * svg_width;\n        }).attr(\"y\", function (d, i) {\n          // console.log(Math.floor(i / 33));\n          return Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) + 0.15 * svg_width;\n        });\n      }\n\n      setSortMethod(2);\n    }\n  }\n\n  function handleSortDay() {\n    // console.log(\"Sort Day\");\n    if (sortMethod !== 1) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n        svg.selectAll(\"rect\").sort(function (x, y) {\n          return d3.ascending(x.day_number, y.day_number);\n        }).transition().duration(2000).attr(\"width\", recs.width).attr(\"height\", recs.height).attr(\"x\", function (d, i) {\n          return i % nRecsPerRow * (recs.width + gridGap.x) + 0.15 * svg_width;\n        }).attr(\"y\", function (d, i) {\n          // console.log(Math.floor(i / 33));\n          return Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) + 0.15 * svg_width;\n        });\n        setSortMethod(1);\n      }\n    }\n  }\n\n  function handleSortMonth() {\n    console.log(\"Sort Month\");\n\n    if (sortMethod !== 3) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        console.log(\"Group Month!\"); // We first check whether the year is a leap year because in that case the\n        //  month of february has 29 days instead of 28.\n\n        /* Write leap year test here! */\n\n        const monthLength = {\n          1: 31,\n          2: 28,\n          3: 31,\n          4: 30,\n          5: 31,\n          6: 30,\n          7: 31,\n          8: 31,\n          9: 30,\n          10: 31,\n          11: 30,\n          12: 31\n        };\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n        svg.selectAll(\"rect\").sort(function (x, y) {\n          return d3.ascending(x.day_number, y.day_number);\n        }).transition().duration(2000).attr(\"width\", recs.width).attr(\"height\", recs.height).attr(\"x\", function (d, i) {\n          // This will be useful for knowing how to distribute the\n          //  squares in months. We'll need this logic becausse there are\n          //  leap years, where the month of February has 29 days.\n          let summedDaysPreviousMonth = 0; // January\n\n          if (d.month === 1) {\n            summedDaysPreviousMonth += monthLength[1];\n            return i % 6 * recs.width + 0.05 * svg_width;\n          } // February\n          else if (d.month === 2) {\n              let daysToReduce = summedDaysPreviousMonth;\n              summedDaysPreviousMonth += monthLength[2];\n              return (// ((i - 31) % 6) * recs.width + 0.05 * svg_width + 7 * recs.width\n                (i - daysToReduce) % 6 * recs.width + 0.05 * svg_width + 7 * recs.width\n              );\n            } // March\n            else if (d.month === 3) {\n                let daysToReduce = summedDaysPreviousMonth;\n                summedDaysPreviousMonth += monthLength[3];\n                return (// ((i - 59) % 6) * recs.width + 0.05 * svg_width + 14 * recs.width\n                  (i - daysToReduce) % 6 * recs.width + 0.05 * svg_width + 14 * recs.width\n                );\n              } // April\n              else if (d.month === 4) {\n                  let daysToReduce = summedDaysPreviousMonth;\n                  summedDaysPreviousMonth += monthLength[4];\n                  return (// ((i - 90) % 6) * recs.width + 0.05 * svg_width + 21 * recs.width\n                    (i - daysToReduce) % 6 * recs.width + 0.05 * svg_width + 21 * recs.width\n                  );\n                } // May\n                else if (d.month === 5) {\n                    let daysToReduce = summedDaysPreviousMonth;\n                    summedDaysPreviousMonth += monthLength[5]; // return ((i - 120) % 6) * recs.width + 0.05 * svg_width;\n\n                    return (i - daysToReduce) % 6 * recs.width + 0.05 * svg_width;\n                  } // Jun\n                  else if (d.month === 6) {\n                      let daysToReduce = summedDaysPreviousMonth;\n                      summedDaysPreviousMonth += monthLength[6];\n                      return (// ((i - 151) % 6) * recs.width + 0.05 * svg_width + 7 * recs.width\n                        (i - daysToReduce) % 6 * recs.width + 0.05 * svg_width + 7 * recs.width\n                      );\n                    } // July\n                    else if (d.month === 7) {\n                        let daysToReduce = summedDaysPreviousMonth;\n                        summedDaysPreviousMonth += monthLength[7];\n                        return (// ((i - 181) % 6) * recs.width +\n                          // 0.05 * svg_width +\n                          // 14 * recs.width\n                          (i - daysToReduce) % 6 * recs.width + 0.05 * svg_width + 14 * recs.width\n                        );\n                      } // August\n                      else if (d.month === 8) {\n                          let daysToReduce = summedDaysPreviousMonth;\n                          summedDaysPreviousMonth += monthLength[8];\n                          return (// ((i - 212) % 6) * recs.width +\n                            // 0.05 * svg_width +\n                            // 21 * recs.width\n                            (i - daysToReduce) % 6 * recs.width + 0.05 * svg_width + 21 * recs.width\n                          );\n                        } // September\n                        else if (d.month === 9) {\n                            // return ((i - 243) % 6) * recs.width + 0.05 * svg_width;\n                            return (i - monthLength[1] - monthLength[2] - monthLength[3] - monthLength[4] - monthLength[5] - monthLength[6] - monthLength[7] - monthLength[8]) % 6 * recs.width + 0.05 * svg_width;\n                          } // October\n                          else if (d.month === 10) {\n                              return (// ((i - 273) % 6) * recs.width + 0.05 * svg_width + 7 * recs.width\n                                (i - monthLength[1] - monthLength[2] - monthLength[3] - monthLength[4] - monthLength[5] - monthLength[6] - monthLength[7] - monthLength[8] - monthLength[9]) % 6 * recs.width + 0.05 * svg_width + 7 * recs.width\n                              );\n                            } // November\n                            else if (d.month === 11) {\n                                return (// ((i - 304) % 6) * recs.width +\n                                  // 0.05 * svg_width +\n                                  // 14 * recs.width\n                                  (i - monthLength[1] - monthLength[2] - monthLength[3] - monthLength[4] - monthLength[5] - monthLength[6] - monthLength[7] - monthLength[8] - monthLength[9] - monthLength[10]) % 6 * recs.width + 0.05 * svg_width + 14 * recs.width\n                                );\n                              } // December\n                              else if (d.month === 12) {\n                                  return (// ((i - 334) % 6) * recs.width +\n                                    // 0.05 * svg_width +\n                                    // 21 * recs.width\n                                    (i - monthLength[1] - monthLength[2] - monthLength[3] - monthLength[4] - monthLength[5] - monthLength[6] - monthLength[7] - monthLength[8] - monthLength[9] - monthLength[10] - monthLength[11]) % 6 * recs.width + 0.05 * svg_width + 21 * recs.width\n                                  );\n                                } else {\n                                  return 500;\n                                }\n        }).attr(\"y\", function (d, i) {\n          // January\n          if (d.month === 1) {\n            return Math.floor(i / 6) * recs.height + 0.05 * svg_width;\n          } // February\n          else if (d.month === 2) {\n              return Math.floor((i - 31) / 6) * recs.height + 0.05 * svg_width;\n            } // March\n            else if (d.month === 3) {\n                return Math.floor((i - 59) / 6) * recs.height + 0.05 * svg_width;\n              } // April\n              else if (d.month === 4) {\n                  return Math.floor((i - 90) / 6) * recs.height + 0.05 * svg_width;\n                } // May\n                else if (d.month === 5) {\n                    return Math.floor((i - 120) / 6) * recs.height + 0.05 * svg_width + 9 * recs.height;\n                  } // June\n                  else if (d.month === 6) {\n                      return Math.floor((i - 151) / 6) * recs.height + 0.05 * svg_width + 9 * recs.height;\n                    } // July\n                    else if (d.month === 7) {\n                        return Math.floor((i - 181) / 6) * recs.height + 0.05 * svg_width + 9 * recs.height;\n                      } // August\n                      else if (d.month === 8) {\n                          return Math.floor((i - 212) / 6) * recs.height + 0.05 * svg_width + 9 * recs.height;\n                        } // September\n                        else if (d.month === 9) {\n                            return Math.floor((i - 243) / 6) * recs.height + 0.05 * svg_width + 18 * recs.height;\n                          } // October\n                          else if (d.month === 10) {\n                              return Math.floor((i - 273) / 6) * recs.height + 0.05 * svg_width + 18 * recs.height;\n                            } // November\n                            else if (d.month === 11) {\n                                return Math.floor((i - 304) / 6) * recs.height + 0.05 * svg_width + 18 * recs.height;\n                              } // Dececmber\n                              else if (d.month === 12) {\n                                  return Math.floor((i - 334) / 6) * recs.height + 0.05 * svg_width + 18 * recs.height;\n                                }\n        }); // // Writing months names\n        // var month_labels = svg.selectAll(\"text\");\n        // month_labels\n        //   .transition()\n        //   .duration(2000)\n        //   .attr(\"x\", function (d, i) {\n        //     if (d === \"January\") {\n        //       return 0.05 * svg_width;\n        //     } else if (d === \"February\") {\n        //       return 0.05 * svg_width + 7 * rec_w;\n        //     } else if (d === \"March\") {\n        //       return 0.05 * svg_width + 14 * rec_w;\n        //     } else if (d === \"April\") {\n        //       return 0.05 * svg_width + 21 * rec_w;\n        //     }\n        //     // 2nd row\n        //     else if (d === \"May\") {\n        //       return 0.05 * svg_width;\n        //     } else if (d === \"June\") {\n        //       return 0.05 * svg_width + 7 * rec_w;\n        //     } else if (d === \"July\") {\n        //       return 0.05 * svg_width + 14 * rec_w;\n        //     } else if (d === \"August\") {\n        //       return 0.05 * svg_width + 21 * rec_w;\n        //     }\n        //     // 3rd row\n        //     else if (d === \"September\") {\n        //       return 0.05 * svg_width;\n        //     } else if (d === \"October\") {\n        //       return 0.05 * svg_width + 7 * rec_w;\n        //     } else if (d === \"November\") {\n        //       return 0.05 * svg_width + 14 * rec_w;\n        //     } else if (d === \"December\") {\n        //       return 0.05 * svg_width + 21 * rec_w;\n        //     }\n        //   })\n        //   .attr(\"y\", function (d, i) {\n        //     if (d === \"January\") {\n        //       return 0.05 * svg_width - 10;\n        //     } else if (d === \"February\") {\n        //       return 0.05 * svg_width - 10;\n        //     } else if (d === \"March\") {\n        //       return 0.05 * svg_width - 10;\n        //     } else if (d === \"April\") {\n        //       return 0.05 * svg_width - 10;\n        //     }\n        //     // 2nd row\n        //     else if (d === \"May\") {\n        //       return 0.05 * svg_width + 9 * rec_h - 10;\n        //     } else if (d === \"June\") {\n        //       return 0.05 * svg_width + 9 * rec_h - 10;\n        //     } else if (d === \"July\") {\n        //       return 0.05 * svg_width + 9 * rec_h - 10;\n        //     } else if (d === \"August\") {\n        //       return 0.05 * svg_width + 9 * rec_h - 10;\n        //     }\n        //     // 3rd row\n        //     else if (d === \"September\") {\n        //       return 0.05 * svg_width + 18 * rec_h - 10;\n        //     } else if (d === \"October\") {\n        //       return 0.05 * svg_width + 18 * rec_h - 10;\n        //     } else if (d === \"November\") {\n        //       return 0.05 * svg_width + 18 * rec_h - 10;\n        //     } else if (d === \"December\") {\n        //       return 0.05 * svg_width + 18 * rec_h - 10;\n        //     }\n        //   });\n      }\n\n      setSortMethod(3);\n    }\n  }\n\n  function handleSlideChange(event) {// console.log(\"Slide changed: \" + event.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid_controlers\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSortLight,\n        children: \"Sort Light\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSortDay,\n        children: \"Sort Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSortMonth,\n        children: \"Group Months\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slidecontainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: \"100\",\n          defaultValue: \"100\",\n          className: \"slider\",\n          id: \"colorSlider\",\n          onInput: handleSlideChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"slide_value_p\",\n          children: \" 100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"color_sample\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d3Container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: d3Grid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 591,\n    columnNumber: 5\n  }, this);\n}\n\n_s(D3YearGrid, \"iCyHS1lkV+NIxmXGwUxPF/wRza0=\");\n\n_c = D3YearGrid;\nexport default D3YearGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"D3YearGrid\");","map":{"version":3,"sources":["/Users/k1/Desktop/stockholm_sky/app/src/hooks/D3YearGrid.jsx"],"names":["React","useEffect","useRef","useState","d3","getYear","D3YearGrid","props","d3Grid","data","setData","sortMethod","setSortMethod","svg","setSvg","recs","setRecs","nRecsPerRow","setNRecsPerRow","gridGap","setGridGap","margin","top","right","bottom","left","width","parseInt","select","style","height","gridGapX","gridGapY","x","y","svg_temp","current","attr","svg_width","n_recs_per_row","rec_w","Math","floor","rec_h","selectAll","enter","append","d","i","bright_color","dark_color","factor","c_index","color","html","day_number","handleSortLight","replace","sort","ascending","transition","duration","handleSortDay","handleSortMonth","console","log","monthLength","summedDaysPreviousMonth","month","daysToReduce","handleSlideChange","event"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nimport { getYear } from \"../services/cloud_data_functions\";\n\nimport \"../css/D3YearGrid.css\";\n\nfunction D3YearGrid(props) {\n  const d3Grid = useRef();\n  const [data, setData] = useState([]);\n  // 1 = day_number\n  // 2 = radiation/c_index\n  // 3 = months\n  const [sortMethod, setSortMethod] = useState(1);\n  const [svg, setSvg] = useState(null);\n  const [recs, setRecs] = useState({});\n  const [nRecsPerRow, setNRecsPerRow] = useState(null);\n  const [gridGap, setGridGap] = useState({});\n\n  useEffect(() => {\n    // The data should be all ready when we load this component :)\n    // console.log(\"Inside D3YearGrid!\");\n    // console.log(props.data);\n    // console.log(\"year: \" + props.year);\n\n    const margin = { top: 0, right: 0, bottom: 0, left: 0 };\n    const width = parseInt(d3.select(\".d3Container\").style(\"width\"));\n    // const height = parseInt(d3.select(\".d3Container\").style(\"height\"));\n    const height = 1 * width;\n    const gridGapX = 0;\n    const gridGapY = 0;\n    setGridGap({ x: gridGapX, y: gridGapY });\n\n    // set up the svg\n    const svg_temp = d3\n      .select(d3Grid.current)\n      .attr(\"width\", width - margin.left - margin.right)\n      .attr(\"height\", height - margin.top - margin.bottom)\n      .attr(\"class\", \"D3Svg\")\n      // .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    setSvg(svg_temp);\n\n    var svg_width = width;\n    var n_recs_per_row = 20;\n    var rec_w = Math.floor((0.7 * svg_width) / n_recs_per_row);\n    var rec_h = rec_w;\n    setNRecsPerRow(n_recs_per_row);\n    setRecs({ width: rec_w, height: rec_h });\n\n    // Add the rectangles\n    svg_temp\n      .selectAll(\"rect\") // There's no 'rect' to select. But this is how we do to fill the svg with 'rects'.\n      .data(props.data) // here we load the data\n      .enter()\n      .append(\"rect\") // .enter().append() -> for each datapoint in the dataset, add a 'rect'.\n      .attr(\"width\", rec_w)\n      .attr(\"height\", rec_h)\n      .attr(\"x\", function (d, i) {\n        return (i % n_recs_per_row) * (rec_w + gridGapX) + 0.15 * svg_width;\n      })\n      .attr(\"y\", function (d, i) {\n        return (\n          Math.floor(i / n_recs_per_row) * (rec_h + gridGapY) + 0.15 * svg_width\n        );\n      })\n      .attr(\"fill\", function (d, i) {\n        var bright_color = [100, 146, 230];\n        var dark_color = [99, 112, 124];\n\n        var factor = Math.floor(d.c_index / 10) * 10;\n\n        // hard coding colors:\n        var color = [];\n        if (factor < 10) {\n          // 1.jpg\n          color = [100, 146, 230];\n        } else if (factor >= 10 && factor < 20) {\n          // 2.jpg\n          color = [99, 143, 224];\n        } else if (factor >= 20 && factor < 30) {\n          // 3.jpg\n          color = [96, 142, 214];\n        } else if (factor >= 30 && factor < 40) {\n          // 4.jpg\n          color = [94, 138, 204];\n        } else if (factor >= 40 && factor < 50) {\n          // 5.jpg\n          color = [94, 136, 193];\n        } else if (factor >= 50 && factor < 60) {\n          // 6.jpg\n          color = [93, 131, 182];\n        } else if (factor >= 60 && factor < 70) {\n          // 7.jpg\n          color = [93, 128, 170];\n        } else if (factor >= 70 && factor < 80) {\n          // 8.jpg\n          color = [95, 124, 154];\n        } else if (factor >= 80 && factor < 90) {\n          // 9.jpg\n          color = [97, 118, 138];\n        } else if (factor >= 90) {\n          // 10.jpg\n          color = [99, 112, 124];\n        }\n        return \"rgba(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \", 1)\";\n      })\n      .html(function (d, i) {\n        return d.day_number;\n      });\n  }, []);\n\n  function handleSortLight() {\n    // console.log(\"Sort Light\");\n\n    if (sortMethod !== 2) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n\n        svg\n          .selectAll(\"rect\")\n          .sort(function (x, y) {\n            return d3.ascending(x.c_index, y.c_index);\n          })\n          .transition()\n          .duration(2000)\n          .attr(\"width\", recs.width)\n          .attr(\"height\", recs.height)\n          .attr(\"x\", function (d, i) {\n            return (\n              (i % nRecsPerRow) * (recs.width + gridGap.x) + 0.15 * svg_width\n            );\n          })\n          .attr(\"y\", function (d, i) {\n            // console.log(Math.floor(i / 33));\n            return (\n              Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n              0.15 * svg_width\n            );\n          });\n      }\n\n      setSortMethod(2);\n    }\n  }\n\n  function handleSortDay() {\n    // console.log(\"Sort Day\");\n\n    if (sortMethod !== 1) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n\n        svg\n          .selectAll(\"rect\")\n          .sort(function (x, y) {\n            return d3.ascending(x.day_number, y.day_number);\n          })\n          .transition()\n          .duration(2000)\n          .attr(\"width\", recs.width)\n          .attr(\"height\", recs.height)\n          .attr(\"x\", function (d, i) {\n            return (\n              (i % nRecsPerRow) * (recs.width + gridGap.x) + 0.15 * svg_width\n            );\n          })\n          .attr(\"y\", function (d, i) {\n            // console.log(Math.floor(i / 33));\n            return (\n              Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n              0.15 * svg_width\n            );\n          });\n\n        setSortMethod(1);\n      }\n    }\n  }\n\n  function handleSortMonth() {\n    console.log(\"Sort Month\");\n\n    if (sortMethod !== 3) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        console.log(\"Group Month!\");\n\n        // We first check whether the year is a leap year because in that case the\n        //  month of february has 29 days instead of 28.\n        /* Write leap year test here! */\n\n        const monthLength = {\n          1: 31,\n          2: 28,\n          3: 31,\n          4: 30,\n          5: 31,\n          6: 30,\n          7: 31,\n          8: 31,\n          9: 30,\n          10: 31,\n          11: 30,\n          12: 31,\n        };\n\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n\n        svg\n          .selectAll(\"rect\")\n          .sort(function (x, y) {\n            return d3.ascending(x.day_number, y.day_number);\n          })\n          .transition()\n          .duration(2000)\n          .attr(\"width\", recs.width)\n          .attr(\"height\", recs.height)\n          .attr(\"x\", function (d, i) {\n            // This will be useful for knowing how to distribute the\n            //  squares in months. We'll need this logic becausse there are\n            //  leap years, where the month of February has 29 days.\n            let summedDaysPreviousMonth = 0;\n\n            // January\n            if (d.month === 1) {\n              summedDaysPreviousMonth += monthLength[1];\n\n              return (i % 6) * recs.width + 0.05 * svg_width;\n            }\n\n            // February\n            else if (d.month === 2) {\n              let daysToReduce = summedDaysPreviousMonth;\n              summedDaysPreviousMonth += monthLength[2];\n\n              return (\n                // ((i - 31) % 6) * recs.width + 0.05 * svg_width + 7 * recs.width\n                ((i - daysToReduce) % 6) * recs.width +\n                0.05 * svg_width +\n                7 * recs.width\n              );\n            }\n\n            // March\n            else if (d.month === 3) {\n              let daysToReduce = summedDaysPreviousMonth;\n              summedDaysPreviousMonth += monthLength[3];\n\n              return (\n                // ((i - 59) % 6) * recs.width + 0.05 * svg_width + 14 * recs.width\n                ((i - daysToReduce) % 6) * recs.width +\n                0.05 * svg_width +\n                14 * recs.width\n              );\n            }\n\n            // April\n            else if (d.month === 4) {\n              let daysToReduce = summedDaysPreviousMonth;\n              summedDaysPreviousMonth += monthLength[4];\n\n              return (\n                // ((i - 90) % 6) * recs.width + 0.05 * svg_width + 21 * recs.width\n                ((i - daysToReduce) % 6) * recs.width +\n                0.05 * svg_width +\n                21 * recs.width\n              );\n            }\n\n            // May\n            else if (d.month === 5) {\n              let daysToReduce = summedDaysPreviousMonth;\n              summedDaysPreviousMonth += monthLength[5];\n\n              // return ((i - 120) % 6) * recs.width + 0.05 * svg_width;\n              return ((i - daysToReduce) % 6) * recs.width + 0.05 * svg_width;\n            }\n\n            // Jun\n            else if (d.month === 6) {\n              let daysToReduce = summedDaysPreviousMonth;\n              summedDaysPreviousMonth += monthLength[6];\n\n              return (\n                // ((i - 151) % 6) * recs.width + 0.05 * svg_width + 7 * recs.width\n                ((i - daysToReduce) % 6) * recs.width +\n                0.05 * svg_width +\n                7 * recs.width\n              );\n            }\n\n            // July\n            else if (d.month === 7) {\n              let daysToReduce = summedDaysPreviousMonth;\n              summedDaysPreviousMonth += monthLength[7];\n\n              return (\n                // ((i - 181) % 6) * recs.width +\n                // 0.05 * svg_width +\n                // 14 * recs.width\n                ((i - daysToReduce) % 6) * recs.width +\n                0.05 * svg_width +\n                14 * recs.width\n              );\n            }\n\n            // August\n            else if (d.month === 8) {\n              let daysToReduce = summedDaysPreviousMonth;\n              summedDaysPreviousMonth += monthLength[8];\n\n              return (\n                // ((i - 212) % 6) * recs.width +\n                // 0.05 * svg_width +\n                // 21 * recs.width\n                ((i - daysToReduce) % 6) * recs.width +\n                0.05 * svg_width +\n                21 * recs.width\n              );\n            }\n\n            // September\n            else if (d.month === 9) {\n              // return ((i - 243) % 6) * recs.width + 0.05 * svg_width;\n              return (\n                ((i -\n                  monthLength[1] -\n                  monthLength[2] -\n                  monthLength[3] -\n                  monthLength[4] -\n                  monthLength[5] -\n                  monthLength[6] -\n                  monthLength[7] -\n                  monthLength[8]) %\n                  6) *\n                  recs.width +\n                0.05 * svg_width\n              );\n            }\n\n            // October\n            else if (d.month === 10) {\n              return (\n                // ((i - 273) % 6) * recs.width + 0.05 * svg_width + 7 * recs.width\n                ((i -\n                  monthLength[1] -\n                  monthLength[2] -\n                  monthLength[3] -\n                  monthLength[4] -\n                  monthLength[5] -\n                  monthLength[6] -\n                  monthLength[7] -\n                  monthLength[8] -\n                  monthLength[9]) %\n                  6) *\n                  recs.width +\n                0.05 * svg_width +\n                7 * recs.width\n              );\n            }\n\n            // November\n            else if (d.month === 11) {\n              return (\n                // ((i - 304) % 6) * recs.width +\n                // 0.05 * svg_width +\n                // 14 * recs.width\n                ((i -\n                  monthLength[1] -\n                  monthLength[2] -\n                  monthLength[3] -\n                  monthLength[4] -\n                  monthLength[5] -\n                  monthLength[6] -\n                  monthLength[7] -\n                  monthLength[8] -\n                  monthLength[9] -\n                  monthLength[10]) %\n                  6) *\n                  recs.width +\n                0.05 * svg_width +\n                14 * recs.width\n              );\n            }\n\n            // December\n            else if (d.month === 12) {\n              return (\n                // ((i - 334) % 6) * recs.width +\n                // 0.05 * svg_width +\n                // 21 * recs.width\n                ((i -\n                  monthLength[1] -\n                  monthLength[2] -\n                  monthLength[3] -\n                  monthLength[4] -\n                  monthLength[5] -\n                  monthLength[6] -\n                  monthLength[7] -\n                  monthLength[8] -\n                  monthLength[9] -\n                  monthLength[10] -\n                  monthLength[11]) %\n                  6) *\n                  recs.width +\n                0.05 * svg_width +\n                21 * recs.width\n              );\n            } else {\n              return 500;\n            }\n          })\n          .attr(\"y\", function (d, i) {\n            // January\n            if (d.month === 1) {\n              return Math.floor(i / 6) * recs.height + 0.05 * svg_width;\n            }\n\n            // February\n            else if (d.month === 2) {\n              return Math.floor((i - 31) / 6) * recs.height + 0.05 * svg_width;\n            }\n\n            // March\n            else if (d.month === 3) {\n              return Math.floor((i - 59) / 6) * recs.height + 0.05 * svg_width;\n            }\n\n            // April\n            else if (d.month === 4) {\n              return Math.floor((i - 90) / 6) * recs.height + 0.05 * svg_width;\n            }\n\n            // May\n            else if (d.month === 5) {\n              return (\n                Math.floor((i - 120) / 6) * recs.height +\n                0.05 * svg_width +\n                9 * recs.height\n              );\n            }\n\n            // June\n            else if (d.month === 6) {\n              return (\n                Math.floor((i - 151) / 6) * recs.height +\n                0.05 * svg_width +\n                9 * recs.height\n              );\n            }\n\n            // July\n            else if (d.month === 7) {\n              return (\n                Math.floor((i - 181) / 6) * recs.height +\n                0.05 * svg_width +\n                9 * recs.height\n              );\n            }\n\n            // August\n            else if (d.month === 8) {\n              return (\n                Math.floor((i - 212) / 6) * recs.height +\n                0.05 * svg_width +\n                9 * recs.height\n              );\n            }\n\n            // September\n            else if (d.month === 9) {\n              return (\n                Math.floor((i - 243) / 6) * recs.height +\n                0.05 * svg_width +\n                18 * recs.height\n              );\n            }\n\n            // October\n            else if (d.month === 10) {\n              return (\n                Math.floor((i - 273) / 6) * recs.height +\n                0.05 * svg_width +\n                18 * recs.height\n              );\n            }\n\n            // November\n            else if (d.month === 11) {\n              return (\n                Math.floor((i - 304) / 6) * recs.height +\n                0.05 * svg_width +\n                18 * recs.height\n              );\n            }\n\n            // Dececmber\n            else if (d.month === 12) {\n              return (\n                Math.floor((i - 334) / 6) * recs.height +\n                0.05 * svg_width +\n                18 * recs.height\n              );\n            }\n          });\n\n        // // Writing months names\n        // var month_labels = svg.selectAll(\"text\");\n\n        // month_labels\n        //   .transition()\n        //   .duration(2000)\n        //   .attr(\"x\", function (d, i) {\n        //     if (d === \"January\") {\n        //       return 0.05 * svg_width;\n        //     } else if (d === \"February\") {\n        //       return 0.05 * svg_width + 7 * rec_w;\n        //     } else if (d === \"March\") {\n        //       return 0.05 * svg_width + 14 * rec_w;\n        //     } else if (d === \"April\") {\n        //       return 0.05 * svg_width + 21 * rec_w;\n        //     }\n        //     // 2nd row\n        //     else if (d === \"May\") {\n        //       return 0.05 * svg_width;\n        //     } else if (d === \"June\") {\n        //       return 0.05 * svg_width + 7 * rec_w;\n        //     } else if (d === \"July\") {\n        //       return 0.05 * svg_width + 14 * rec_w;\n        //     } else if (d === \"August\") {\n        //       return 0.05 * svg_width + 21 * rec_w;\n        //     }\n        //     // 3rd row\n        //     else if (d === \"September\") {\n        //       return 0.05 * svg_width;\n        //     } else if (d === \"October\") {\n        //       return 0.05 * svg_width + 7 * rec_w;\n        //     } else if (d === \"November\") {\n        //       return 0.05 * svg_width + 14 * rec_w;\n        //     } else if (d === \"December\") {\n        //       return 0.05 * svg_width + 21 * rec_w;\n        //     }\n        //   })\n        //   .attr(\"y\", function (d, i) {\n        //     if (d === \"January\") {\n        //       return 0.05 * svg_width - 10;\n        //     } else if (d === \"February\") {\n        //       return 0.05 * svg_width - 10;\n        //     } else if (d === \"March\") {\n        //       return 0.05 * svg_width - 10;\n        //     } else if (d === \"April\") {\n        //       return 0.05 * svg_width - 10;\n        //     }\n\n        //     // 2nd row\n        //     else if (d === \"May\") {\n        //       return 0.05 * svg_width + 9 * rec_h - 10;\n        //     } else if (d === \"June\") {\n        //       return 0.05 * svg_width + 9 * rec_h - 10;\n        //     } else if (d === \"July\") {\n        //       return 0.05 * svg_width + 9 * rec_h - 10;\n        //     } else if (d === \"August\") {\n        //       return 0.05 * svg_width + 9 * rec_h - 10;\n        //     }\n        //     // 3rd row\n        //     else if (d === \"September\") {\n        //       return 0.05 * svg_width + 18 * rec_h - 10;\n        //     } else if (d === \"October\") {\n        //       return 0.05 * svg_width + 18 * rec_h - 10;\n        //     } else if (d === \"November\") {\n        //       return 0.05 * svg_width + 18 * rec_h - 10;\n        //     } else if (d === \"December\") {\n        //       return 0.05 * svg_width + 18 * rec_h - 10;\n        //     }\n        //   });\n      }\n\n      setSortMethod(3);\n    }\n  }\n\n  function handleSlideChange(event) {\n    // console.log(\"Slide changed: \" + event.target.value);\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"grid_controlers\">\n        <button onClick={handleSortLight}>Sort Light</button>\n        <button onClick={handleSortDay}>Sort Date</button>\n        <button onClick={handleSortMonth}>Group Months</button>\n\n        <div className=\"slidecontainer\">\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            defaultValue=\"100\"\n            className=\"slider\"\n            id=\"colorSlider\"\n            onInput={handleSlideChange}\n          />\n          <p id=\"slide_value_p\"> 100</p>\n          <div id=\"color_sample\"></div>\n        </div>\n      </div>\n\n      <div className=\"d3Container\">\n        <svg ref={d3Grid}></svg>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default D3YearGrid;\n"]},"metadata":{},"sourceType":"module"}