{"ast":null,"code":"import _slicedToArray from\"/Users/k1/Desktop/stockholm_sky_gitpages2/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";import{useState,useRef,useCallback,useEffect}from\"react\";import\"../css/multiRangeSlider.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var MultiRangeSlider=function MultiRangeSlider(props){var min=props.min;var max=props.max;// Creating the state variables\nvar _useState=useState(min),_useState2=_slicedToArray(_useState,2),minVal=_useState2[0],setMinVal=_useState2[1];var _useState3=useState(max),_useState4=_slicedToArray(_useState3,2),maxVal=_useState4[0],setMaxVal=_useState4[1];// Creating the refs\nvar minValRef=useRef(min);var maxValRef=useRef(max);// Create a ref to our slider\nvar range=useRef(null);// Convert to percentage\nvar getPercent=useCallback(function(value){return Math.round((value-min)/(max-min)*100);},[min,max]);// Set width of the range to change from the left side\nuseEffect(function(){var minPercent=getPercent(minVal);var maxPercent=getPercent(maxValRef.current);if(range.current){range.current.style.left=\"\".concat(minPercent,\"%\");range.current.style.width=\"\".concat(maxPercent-minPercent,\"%\");}},[minVal,getPercent]);// Set width of the range to change from the right side\nuseEffect(function(){var minPercent=getPercent(minValRef.current);var maxPercent=getPercent(maxVal);if(range.current){range.current.style.width=\"\".concat(maxPercent-minPercent,\"%\");}},[maxVal,getPercent]);return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(\"input\",{type:\"range\",min:min,max:max,value:minVal,onChange:function onChange(event){props.onChange();// maxVal - 1, maintains a difference of one between minVal and maxVal.\n// This is done to make sure that minVal does not exceed maxVal.\nvar value=Math.min(Number(event.target.value),maxVal-1);setMinVal(value);minValRef.current=value;props.onChange(value,maxVal);},className:\"thumb thumb--left\",style:{zIndex:minVal>max-100&&\"5\"}}),/*#__PURE__*/_jsx(\"input\",{type:\"range\",min:min,max:max,value:maxVal,onChange:function onChange(event){// minVal + 1, maintains a difference of one between minVal and maxVal.\n// This is done to make sure that maxVal isn't smaller than minVal.\nvar value=Math.max(Number(event.target.value),minVal+1);setMaxVal(value);maxValRef.current=value;props.onChange(minVal,value);},className:\"thumb thumb--right\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"slider\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"slider__track\"}),/*#__PURE__*/_jsx(\"div\",{ref:range,className:\"slider__range\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"slider__left-value\",children:[minVal,\"%\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"slider__right-value\",children:[maxVal,\"%\"]})]})]});};// Set each prop as type number\nexport default MultiRangeSlider;","map":null,"metadata":{},"sourceType":"module"}