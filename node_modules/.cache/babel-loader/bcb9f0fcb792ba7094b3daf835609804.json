{"ast":null,"code":"var _jsxFileName = \"/Users/k1/Desktop/stockholm_sky/app/src/hooks/D3YearGrid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { getYear } from \"../services/cloud_data_functions\";\nimport \"../css/D3YearGrid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction D3YearGrid(props) {\n  _s();\n\n  const d3Grid = useRef();\n  const [data, setData] = useState([]); // 1 = day_number\n  // 2 = radiation/c_index\n  // 3 = months\n\n  const [sortMethod, setSortMethod] = useState(1);\n  useEffect(() => {\n    // We need to query the data asyncronously because it might take a while to receive the data.\n    let getDataFunction = async () => {\n      return getYear(props.year);\n    }; // When we are done getting the data, the function inside \".then()\" is executed.\n\n\n    getDataFunction().then(values => {\n      console.log(\"Inside getDataFunction!\");\n      console.log(values); // Saving the data\n\n      setData(getYear(props.year));\n      const margin = {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10\n      };\n      const width = parseInt(d3.select(\".d3Container\").style(\"width\"));\n      const height = parseInt(d3.select(\".d3Container\").style(\"height\")); // set up the svg\n\n      const svg = d3.select(d3Grid.current).attr(\"width\", width - margin.left - margin.right).attr(\"height\", height - margin.top - margin.bottom).attr(\"class\", \"D3Svg\") // .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n      var svg_width = width;\n      var n_recs_per_row = 20;\n      var rec_w = Math.floor(0.7 * svg_width / n_recs_per_row);\n      var rec_h = rec_w;\n      svg.selectAll(\"rect\") // There's no 'rect' to select. But this is how we do to fill the svg with 'rects'.\n      .data([1, 2, 3, 4]) // here we load the data\n      .enter().append(\"rect\"); // .enter().append() -> for each datapoint in the dataset, add a 'rect'.\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d3Container\",\n    children: [\"hello from D3YearGrid\", /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: d3Grid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(D3YearGrid, \"8y7ZJxxdaUbLx3gi4KUuKP0bsVU=\");\n\n_c = D3YearGrid;\nexport default D3YearGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"D3YearGrid\");","map":{"version":3,"sources":["/Users/k1/Desktop/stockholm_sky/app/src/hooks/D3YearGrid.jsx"],"names":["React","useEffect","useRef","useState","d3","getYear","D3YearGrid","props","d3Grid","data","setData","sortMethod","setSortMethod","getDataFunction","year","then","values","console","log","margin","top","right","bottom","left","width","parseInt","select","style","height","svg","current","attr","svg_width","n_recs_per_row","rec_w","Math","floor","rec_h","selectAll","enter","append"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAEA,SAASC,OAAT,QAAwB,kCAAxB;AAEA,OAAO,uBAAP;;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACzB,QAAMC,MAAM,GAAGN,MAAM,EAArB;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC,CAFyB,CAGzB;AACA;AACA;;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,CAAD,CAA5C;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIY,eAAe,GAAG,YAAY;AAChC,aAAOR,OAAO,CAACE,KAAK,CAACO,IAAP,CAAd;AACD,KAFD,CAFc,CAMd;;;AACAD,IAAAA,eAAe,GAAGE,IAAlB,CAAwBC,MAAD,IAAY;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAFiC,CAIjC;;AACAN,MAAAA,OAAO,CAACL,OAAO,CAACE,KAAK,CAACO,IAAP,CAAR,CAAP;AAEA,YAAMK,MAAM,GAAG;AAAEC,QAAAA,GAAG,EAAE,EAAP;AAAWC,QAAAA,KAAK,EAAE,EAAlB;AAAsBC,QAAAA,MAAM,EAAE,EAA9B;AAAkCC,QAAAA,IAAI,EAAE;AAAxC,OAAf;AACA,YAAMC,KAAK,GAAGC,QAAQ,CAACrB,EAAE,CAACsB,MAAH,CAAU,cAAV,EAA0BC,KAA1B,CAAgC,OAAhC,CAAD,CAAtB;AACA,YAAMC,MAAM,GAAGH,QAAQ,CAACrB,EAAE,CAACsB,MAAH,CAAU,cAAV,EAA0BC,KAA1B,CAAgC,QAAhC,CAAD,CAAvB,CATiC,CAWjC;;AACA,YAAME,GAAG,GAAGzB,EAAE,CACXsB,MADS,CACFlB,MAAM,CAACsB,OADL,EAETC,IAFS,CAEJ,OAFI,EAEKP,KAAK,GAAGL,MAAM,CAACI,IAAf,GAAsBJ,MAAM,CAACE,KAFlC,EAGTU,IAHS,CAGJ,QAHI,EAGMH,MAAM,GAAGT,MAAM,CAACC,GAAhB,GAAsBD,MAAM,CAACG,MAHnC,EAITS,IAJS,CAIJ,OAJI,EAIK,OAJL,EAKV;AALU,OAMTA,IANS,CAMJ,WANI,EAMS,eAAeZ,MAAM,CAACI,IAAtB,GAA6B,GAA7B,GAAmCJ,MAAM,CAACC,GAA1C,GAAgD,GANzD,CAAZ;AAQA,UAAIY,SAAS,GAAGR,KAAhB;AACA,UAAIS,cAAc,GAAG,EAArB;AACA,UAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAY,MAAMJ,SAAP,GAAoBC,cAA/B,CAAZ;AACA,UAAII,KAAK,GAAGH,KAAZ;AAEAL,MAAAA,GAAG,CACAS,SADH,CACa,MADb,EACqB;AADrB,OAEG7B,IAFH,CAEQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFR,EAEsB;AAFtB,OAGG8B,KAHH,GAIGC,MAJH,CAIU,MAJV,EAzBiC,CA6Bd;AACpB,KA9BD;AA+BD,GAtCQ,EAsCN,EAtCM,CAAT;AAwCA,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,qDAEE;AAAK,MAAA,GAAG,EAAEhC;AAAV;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAtDQF,U;;KAAAA,U;AAwDT,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nimport { getYear } from \"../services/cloud_data_functions\";\n\nimport \"../css/D3YearGrid.css\";\n\nfunction D3YearGrid(props) {\n  const d3Grid = useRef();\n  const [data, setData] = useState([]);\n  // 1 = day_number\n  // 2 = radiation/c_index\n  // 3 = months\n  const [sortMethod, setSortMethod] = useState(1);\n\n  useEffect(() => {\n    // We need to query the data asyncronously because it might take a while to receive the data.\n    let getDataFunction = async () => {\n      return getYear(props.year);\n    };\n\n    // When we are done getting the data, the function inside \".then()\" is executed.\n    getDataFunction().then((values) => {\n      console.log(\"Inside getDataFunction!\");\n      console.log(values);\n\n      // Saving the data\n      setData(getYear(props.year));\n\n      const margin = { top: 10, right: 10, bottom: 10, left: 10 };\n      const width = parseInt(d3.select(\".d3Container\").style(\"width\"));\n      const height = parseInt(d3.select(\".d3Container\").style(\"height\"));\n\n      // set up the svg\n      const svg = d3\n        .select(d3Grid.current)\n        .attr(\"width\", width - margin.left - margin.right)\n        .attr(\"height\", height - margin.top - margin.bottom)\n        .attr(\"class\", \"D3Svg\")\n        // .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      var svg_width = width;\n      var n_recs_per_row = 20;\n      var rec_w = Math.floor((0.7 * svg_width) / n_recs_per_row);\n      var rec_h = rec_w;\n\n      svg\n        .selectAll(\"rect\") // There's no 'rect' to select. But this is how we do to fill the svg with 'rects'.\n        .data([1, 2, 3, 4]) // here we load the data\n        .enter()\n        .append(\"rect\"); // .enter().append() -> for each datapoint in the dataset, add a 'rect'.\n    });\n  }, []);\n\n  return (\n    <div className=\"d3Container\">\n      hello from D3YearGrid\n      <svg ref={d3Grid}></svg>\n    </div>\n  );\n}\n\nexport default D3YearGrid;\n"]},"metadata":{},"sourceType":"module"}