{"ast":null,"code":"import _toConsumableArray from\"/Users/k1/Desktop/stockholm_sky_gitpages2/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/k1/Desktop/stockholm_sky_gitpages2/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import\"./App.css\";import\"./hooks/hidenMenu\";import\"./hooks/yearGrid\";import HidenMenu from\"./hooks/hidenMenu\";import YearGrid from\"./hooks/yearGrid\";import YearPanelSmall from\"./hooks/yearPanelSmall\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),yearsShowing=_useState2[0],setYearsShowing=_useState2[1];var _useState3=useState(1756),_useState4=_slicedToArray(_useState3,2),yearSelected=_useState4[0],setYearSelected=_useState4[1];// useEffect(() => {\n//   // This function is executed every time the component is rendered.\n//   // So it's the same as calling both:\n//   // componentDidMount -> the first time the component is mounted.\n//   // componentDidUpdate -> when receives new props or the state changes.\n//   const temp = getYear(1756);\n//   console.log(temp);\n// }, []); // this array that is passed as the second parameter of the useEffect function indicates which variables are the triggers to call useEffect. If these variables change, the useEffect will be called. If we don't have this array, the function will be called on any props/state change.\nfunction handleAddGrid(){// Cloning 'yearsShowing' array.\nvar yearsShowingCopy=_toConsumableArray(yearsShowing);// Add the new year\nyearsShowingCopy.push(yearSelected);// Updating the state.\nsetYearsShowing(yearsShowingCopy);}function handleYearChange(e){setYearSelected(parseInt(e.target.value));// console.log(e.target.value);\n}function handleDeleteGrid(yearToBeDeleted){// Cloning the array\nvar yearsShowingTemp=_toConsumableArray(yearsShowing);// Finding the index of the 'yearToBeDeleted' in our list\nvar index=yearsShowingTemp.indexOf(yearToBeDeleted);// Removing the 'yearToBeDeleted' from the list\nyearsShowingTemp.splice(index,1);setYearsShowing(yearsShowingTemp);}return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"tempMenu\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"addGridButton\",onClick:handleAddGrid,children:\"Add\"}),/*#__PURE__*/_jsx(\"select\",{name:\"years\",onChange:handleYearChange,children:Array.from(Array(263).keys()).map(function(x){return x+1756;}).map(function(i){return/*#__PURE__*/_jsx(\"option\",{value:i,children:i},i);})})]}),yearsShowing.length===1000000000?/*#__PURE__*/_jsx(\"div\",{className:\"fullScreenGridDiv\",children:/*#__PURE__*/_jsx(YearGrid,{})}):/*#__PURE__*/_jsx(\"div\",{className:\"gridsComparisonContainer\",children:yearsShowing.map(function(y){return/*#__PURE__*/_jsx(YearPanelSmall,{year:y,onDelete:handleDeleteGrid},y);})})]});}export default App;","map":null,"metadata":{},"sourceType":"module"}