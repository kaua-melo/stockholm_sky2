{"ast":null,"code":"import _slicedToArray from\"/Users/k1/Desktop/stockholm_sky_gitpages2/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";import{useState,useRef,useCallback,useEffect}from\"react\";import\"../css/multiRangeSlider.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var MultiRangeSlider=function MultiRangeSlider(props){var min=props.min;var max=props.max;// Creating the state variables\nvar _useState=useState(min),_useState2=_slicedToArray(_useState,2),minVal=_useState2[0],setMinVal=_useState2[1];var _useState3=useState(max),_useState4=_slicedToArray(_useState3,2),maxVal=_useState4[0],setMaxVal=_useState4[1];// Creating the refs\nvar minValRef=useRef(min);var maxValRef=useRef(max);// Create a ref to our slider\nvar range=useRef(null);// Convert to percentage\nvar getPercent=useCallback(function(value){return Math.round((value-min)/(max-min)*100);},[min,max]);// Set width of the range to change from the left side\nuseEffect(function(){var minPercent=getPercent(minVal);var maxPercent=getPercent(maxValRef.current);if(range.current){range.current.style.left=\"\".concat(minPercent,\"%\");range.current.style.width=\"\".concat(maxPercent-minPercent,\"%\");}},[minVal,getPercent]);// Set width of the range to change from the right side\nuseEffect(function(){var minPercent=getPercent(minValRef.current);var maxPercent=getPercent(maxVal);if(range.current){range.current.style.width=\"\".concat(maxPercent-minPercent,\"%\");}},[maxVal,getPercent]);return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(\"input\",{type:\"range\",min:min,max:max,value:minVal,onChange:function onChange(event){props.onChange();// maxVal - 1, maintains a difference of one between minVal and maxVal.\n// This is done to make sure that minVal does not exceed maxVal.\nvar value=Math.min(Number(event.target.value),maxVal-1);setMinVal(value);minValRef.current=value;props.onChange(value,maxVal);},className:\"thumb thumb--left\",style:{zIndex:minVal>max-100&&\"5\"}}),/*#__PURE__*/_jsx(\"input\",{type:\"range\",min:min,max:max,value:maxVal,onChange:function onChange(event){// minVal + 1, maintains a difference of one between minVal and maxVal.\n// This is done to make sure that maxVal isn't smaller than minVal.\nvar value=Math.max(Number(event.target.value),minVal+1);setMaxVal(value);maxValRef.current=value;props.onChange(minVal,value);},className:\"thumb thumb--right\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"slider\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"slider__track\"}),/*#__PURE__*/_jsx(\"div\",{ref:range,className:\"slider__range\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"slider__left-value\",children:[minVal,\"%\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"slider__right-value\",children:[maxVal,\"%\"]})]})]});};// Set each prop as type number\nexport default MultiRangeSlider;","map":{"version":3,"sources":["/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/MultiRangeSlider.jsx"],"names":["React","useState","useRef","useCallback","useEffect","MultiRangeSlider","props","min","max","minVal","setMinVal","maxVal","setMaxVal","minValRef","maxValRef","range","getPercent","value","Math","round","minPercent","maxPercent","current","style","left","width","event","onChange","Number","target","zIndex"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useState, useRef, useCallback, useEffect } from \"react\";\n\nimport \"../css/multiRangeSlider.css\";\n\nconst MultiRangeSlider = (props) => {\n  var min = props.min;\n  var max = props.max;\n\n  // Creating the state variables\n  const [minVal, setMinVal] = useState(min);\n  const [maxVal, setMaxVal] = useState(max);\n\n  // Creating the refs\n  const minValRef = useRef(min);\n  const maxValRef = useRef(max);\n\n  // Create a ref to our slider\n  const range = useRef(null);\n\n  // Convert to percentage\n  const getPercent = useCallback(\n    (value) => Math.round(((value - min) / (max - min)) * 100),\n    [min, max]\n  );\n\n  // Set width of the range to change from the left side\n  useEffect(() => {\n    const minPercent = getPercent(minVal);\n    const maxPercent = getPercent(maxValRef.current);\n\n    if (range.current) {\n      range.current.style.left = `${minPercent}%`;\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [minVal, getPercent]);\n\n  // Set width of the range to change from the right side\n  useEffect(() => {\n    const minPercent = getPercent(minValRef.current);\n    const maxPercent = getPercent(maxVal);\n\n    if (range.current) {\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [maxVal, getPercent]);\n\n  return (\n    <React.Fragment>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={minVal}\n        onChange={(event) => {\n          props.onChange();\n\n          // maxVal - 1, maintains a difference of one between minVal and maxVal.\n          // This is done to make sure that minVal does not exceed maxVal.\n          const value = Math.min(Number(event.target.value), maxVal - 1);\n          setMinVal(value);\n          minValRef.current = value;\n          props.onChange(value, maxVal);\n        }}\n        className=\"thumb thumb--left\"\n        style={{ zIndex: minVal > max - 100 && \"5\" }}\n      />\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={maxVal}\n        onChange={(event) => {\n          // minVal + 1, maintains a difference of one between minVal and maxVal.\n          // This is done to make sure that maxVal isn't smaller than minVal.\n          const value = Math.max(Number(event.target.value), minVal + 1);\n          setMaxVal(value);\n          maxValRef.current = value;\n\n          props.onChange(minVal, value);\n        }}\n        className=\"thumb thumb--right\"\n      />\n\n      {/* Creating our own slider here */}\n      <div className=\"slider\">\n        <div className=\"slider__track\" />\n        <div ref={range} className=\"slider__range\" />\n\n        <div className=\"slider__left-value\">{minVal}%</div>\n        <div className=\"slider__right-value\">{maxVal}%</div>\n      </div>\n    </React.Fragment>\n  );\n};\n\n// Set each prop as type number\nMultiRangeSlider.propTypes = {\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n};\n\nexport default MultiRangeSlider;\n"]},"metadata":{},"sourceType":"module"}