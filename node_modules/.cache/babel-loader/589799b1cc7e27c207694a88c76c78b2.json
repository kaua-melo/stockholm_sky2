{"ast":null,"code":"import _slicedToArray from\"/Users/k1/Desktop/stockholm_sky_gitpages2/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useRef,useState}from\"react\";import*as d3 from\"d3\";import{getYear}from\"../services/cloud_data_functions\";import\"../css/D3YearGrid.css\";import MultiRangeSlider from\"./MultiRangeSlider\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function D3YearGrid(props){var d3Grid=useRef();// const [data, setData] = useState([]);\n// 1 = day_number\n// 2 = radiation/c_index\n// 3 = months\n// 4 = play song\nvar _useState=useState(1),_useState2=_slicedToArray(_useState,2),sortMethod=_useState2[0],setSortMethod=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),svg=_useState4[0],setSvg=_useState4[1];var _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),recs=_useState6[0],setRecs=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),nRecsPerRow=_useState8[0],setNRecsPerRow=_useState8[1];var _useState9=useState({}),_useState10=_slicedToArray(_useState9,2),gridGap=_useState10[0],setGridGap=_useState10[1];var _useState11=useState({}),_useState12=_slicedToArray(_useState11,2),monthsLength=_useState12[0],setMonthsLength=_useState12[1];// const [indexThreshold, setIndexThreshold] = useState(100);\nvar _useState13=useState(0),_useState14=_slicedToArray(_useState13,2),filterMin=_useState14[0],setFilterMin=_useState14[1];var _useState15=useState(100),_useState16=_slicedToArray(_useState15,2),filterMax=_useState16[0],setFilterMax=_useState16[1];useEffect(function(){// The data should be all ready when we load this component :)\n// console.log(\"Inside D3YearGrid!\");\n// console.log(props.data);\n// console.log(\"year: \" + props.year);\nvar margin={top:0,right:0,bottom:0,left:0};var width=parseInt(d3.select(\".d3Container\").style(\"width\"));// const height = parseInt(d3.select(\".d3Container\").style(\"height\"));\nvar height=1*width;var gridGapX=0;var gridGapY=0;setGridGap({x:gridGapX,y:gridGapY});// set up the svg\nvar svg_temp=d3.select(d3Grid.current).attr(\"width\",width-margin.left-margin.right).attr(\"height\",height-margin.top-margin.bottom).attr(\"class\",\"D3Svg\")// .append(\"g\")\n.attr(\"transform\",\"translate(\"+margin.left+\",\"+margin.top+\")\");setSvg(svg_temp);var svg_width=width;var n_recs_per_row=20;var rec_w=Math.floor(0.7*svg_width/n_recs_per_row);var rec_h=rec_w;setNRecsPerRow(n_recs_per_row);setRecs({width:rec_w,height:rec_h});// Add the rectangles\nsvg_temp.selectAll(\"rect\")// There's no 'rect' to select. But this is how we do to fill the svg with 'rects'.\n.data(props.data)// here we load the data\n.enter().append(\"rect\")// .enter().append() -> for each datapoint in the dataset, add a 'rect'.\n.attr(\"width\",rec_w).attr(\"height\",rec_h).attr(\"x\",function(d,i){return i%n_recs_per_row*(rec_w+gridGapX)+0.15*svg_width;}).attr(\"y\",function(d,i){return Math.floor(i/n_recs_per_row)*(rec_h+gridGapY)+0.15*svg_width;}).attr(\"fill\",function(d,i){var bright_color=[100,146,230];var dark_color=[99,112,124];var factor=Math.floor(d.c_index/10)*10;// hard coding colors:\nvar color=[];if(factor<10){// 1.jpg\ncolor=[100,146,230];}else if(factor>=10&&factor<20){// 2.jpg\ncolor=[99,143,224];}else if(factor>=20&&factor<30){// 3.jpg\ncolor=[96,142,214];}else if(factor>=30&&factor<40){// 4.jpg\ncolor=[94,138,204];}else if(factor>=40&&factor<50){// 5.jpg\ncolor=[94,136,193];}else if(factor>=50&&factor<60){// 6.jpg\ncolor=[93,131,182];}else if(factor>=60&&factor<70){// 7.jpg\ncolor=[93,128,170];}else if(factor>=70&&factor<80){// 8.jpg\ncolor=[95,124,154];}else if(factor>=80&&factor<90){// 9.jpg\ncolor=[97,118,138];}else if(factor>=90){// 10.jpg\ncolor=[99,112,124];}return\"rgba(\"+color[0]+\",\"+color[1]+\",\"+color[2]+\", 1)\";}).style(\"stroke-opacity\",1)// set the stroke opacity\n.style(\"stroke\",\"black\")// set the line colour\n.style(\"stroke-width\",0.5)// set the stroke width\n.html(function(d,i){return d.day_number;});var monthNames=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];// Adding month labels\nsvg_temp.selectAll(\"text\").data(monthNames).enter().append(\"text\").text(function(d){return d;}).attr(\"x\",-100).attr(\"y\",function(d,i){return 130+i*45;});// We need to check if the year is a leap year because in that case the month\n// of february has 29 days instead of 28. This will be essential for sorting\n// the months visually.\nif(props.data.length===366){setMonthsLength({1:31,2:29,// February has 29 days in leap years\n3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31});}else if(props.data.length===365){setMonthsLength({1:31,2:28,// February has 28 days in non-leap years\n3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31});}},[]);function handleSortLight(){// console.log(\"Sort Light\");\nif(sortMethod!==2){// If the setState already dumped the dvg data into our svg variable\nif(svg){var svg_width=svg.style(\"width\").replace(\"px\",\"\");svg.selectAll(\"rect\").sort(function(x,y){return d3.ascending(x.c_index,y.c_index);}).transition().duration(2000).attr(\"width\",recs.width).attr(\"height\",recs.height).attr(\"x\",function(d,i){return i%nRecsPerRow*(recs.width+gridGap.x)+0.15*svg_width;}).attr(\"y\",function(d,i){// console.log(Math.floor(i / 33));\nreturn Math.floor(i/nRecsPerRow)*(recs.height+gridGap.y)+0.15*svg_width;});// Hiding month labels\nsvg.selectAll(\"text\").transition().duration(2000).attr(\"x\",-100).attr(\"y\",function(d,i){return 130+i*45;});}setSortMethod(2);}}function handleSortDay(){// console.log(\"Sort Day\");\nif(sortMethod!==1){// If the setState already dumped the dvg data into our svg variable\nif(svg){var svg_width=svg.style(\"width\").replace(\"px\",\"\");svg.selectAll(\"rect\").sort(function(x,y){return d3.ascending(x.day_number,y.day_number);}).transition().duration(2000).attr(\"width\",recs.width).attr(\"height\",recs.height).attr(\"x\",function(d,i){return i%nRecsPerRow*(recs.width+gridGap.x)+0.15*svg_width;}).attr(\"y\",function(d,i){// console.log(Math.floor(i / 33));\nreturn Math.floor(i/nRecsPerRow)*(recs.height+gridGap.y)+0.15*svg_width;});// Hiding month labels\nsvg.selectAll(\"text\").transition().duration(2000).attr(\"x\",-100).attr(\"y\",function(d,i){return 130+i*45;});setSortMethod(1);}}}function handleSortMonth(){console.log(\"Sort Month\");if(sortMethod!==3){// If the setState already dumped the dvg data into our svg variable\nif(svg){console.log(\"Group Month!\");var svg_width=svg.style(\"width\").replace(\"px\",\"\");svg.selectAll(\"rect\").sort(function(x,y){return d3.ascending(x.day_number,y.day_number);}).transition().duration(2000).attr(\"width\",recs.width).attr(\"height\",recs.height).attr(\"x\",function(d,i){// This will be useful for knowing how to distribute the\n//  squares in months. We'll need this logic becausse there are\n//  leap years, where the month of February has 29 days.\nvar summedDaysPreviousMonth=0;for(var m=1;m<d.month;m++){summedDaysPreviousMonth+=monthsLength[m];}// January\nif(d.month===1){return i%6*recs.width+0.05*svg_width;}// February\nelse if(d.month===2){return(i-summedDaysPreviousMonth)%6*recs.width+0.05*svg_width+7*recs.width;}// March\nelse if(d.month===3){return(i-summedDaysPreviousMonth)%6*recs.width+0.05*svg_width+14*recs.width;}// April\nelse if(d.month===4){return(i-summedDaysPreviousMonth)%6*recs.width+0.05*svg_width+21*recs.width;}// May\nelse if(d.month===5){return(i-summedDaysPreviousMonth)%6*recs.width+0.05*svg_width;}// Jun\nelse if(d.month===6){return(i-summedDaysPreviousMonth)%6*recs.width+0.05*svg_width+7*recs.width;}// July\nelse if(d.month===7){return(i-summedDaysPreviousMonth)%6*recs.width+0.05*svg_width+14*recs.width;}// August\nelse if(d.month===8){return(i-summedDaysPreviousMonth)%6*recs.width+0.05*svg_width+21*recs.width;}// September\nelse if(d.month===9){return(i-summedDaysPreviousMonth)%6*recs.width+0.05*svg_width;}// October\nelse if(d.month===10){return(i-summedDaysPreviousMonth)%6*recs.width+0.05*svg_width+7*recs.width;}// November\nelse if(d.month===11){return(i-summedDaysPreviousMonth)%6*recs.width+0.05*svg_width+14*recs.width;}// December\nelse if(d.month===12){return(i-summedDaysPreviousMonth)%6*recs.width+0.05*svg_width+21*recs.width;}else{return 500;}}).attr(\"y\",function(d,i){// This will be useful for knowing how to distribute the\n//  squares in months. We'll need this logic becausse there are\n//  leap years, where the month of February has 29 days.\nvar summedDaysPreviousMonth=0;for(var m=1;m<d.month;m++){summedDaysPreviousMonth+=monthsLength[m];}// January\nif(d.month===1){return Math.floor(i/6)*recs.height+0.05*svg_width;}// February\nelse if(d.month===2){return Math.floor((i-summedDaysPreviousMonth)/6)*recs.height+0.05*svg_width;}// March\nelse if(d.month===3){return Math.floor((i-summedDaysPreviousMonth)/6)*recs.height+0.05*svg_width;}// April\nelse if(d.month===4){return Math.floor((i-summedDaysPreviousMonth)/6)*recs.height+0.05*svg_width;}// May\nelse if(d.month===5){return Math.floor((i-summedDaysPreviousMonth)/6)*recs.height+0.05*svg_width+9*recs.height;}// June\nelse if(d.month===6){return Math.floor((i-summedDaysPreviousMonth)/6)*recs.height+0.05*svg_width+9*recs.height;}// July\nelse if(d.month===7){return Math.floor((i-summedDaysPreviousMonth)/6)*recs.height+0.05*svg_width+9*recs.height;}// August\nelse if(d.month===8){return Math.floor((i-summedDaysPreviousMonth)/6)*recs.height+0.05*svg_width+9*recs.height;}// September\nelse if(d.month===9){return Math.floor((i-summedDaysPreviousMonth)/6)*recs.height+0.05*svg_width+18*recs.height;}// October\nelse if(d.month===10){return Math.floor((i-summedDaysPreviousMonth)/6)*recs.height+0.05*svg_width+18*recs.height;}// November\nelse if(d.month===11){return Math.floor((i-summedDaysPreviousMonth)/6)*recs.height+0.05*svg_width+18*recs.height;}// Dececmber\nelse if(d.month===12){return Math.floor((i-summedDaysPreviousMonth)/6)*recs.height+0.05*svg_width+18*recs.height;}});// Writing months names\nsvg.selectAll(\"text\").transition().duration(2000).attr(\"x\",function(d,i){// if (d === \"January\") {\nif(i===0){return 0.05*svg_width;// } else if (d === \"February\") {\n}else if(i===1){return 0.05*svg_width+7*recs.width;// } else if (d === \"March\") {\n}else if(i===2){return 0.05*svg_width+14*recs.width;// } else if (d === \"April\") {\n}else if(i===3){return 0.05*svg_width+21*recs.width;}// 2nd row\n// else if (d === \"May\") {\nelse if(i===4){return 0.05*svg_width;// } else if (d === \"June\") {\n}else if(i===5){return 0.05*svg_width+7*recs.width;// } else if (d === \"July\") {\n}else if(i===6){return 0.05*svg_width+14*recs.width;// } else if (d === \"August\") {\n}else if(i===7){return 0.05*svg_width+21*recs.width;}// 3rd row\n// else if (d === \"September\") {\nelse if(i===8){return 0.05*svg_width;// } else if (d === \"October\") {\n}else if(i===9){return 0.05*svg_width+7*recs.width;// } else if (d === \"November\") {\n}else if(i===10){return 0.05*svg_width+14*recs.width;// } else if (d === \"December\") {\n}else if(i===11){return 0.05*svg_width+21*recs.width;}}).attr(\"y\",function(d,i){// if (d === \"January\") {\nif(i===0){return 0.05*svg_width-10;// } else if (d === \"February\") {\n}else if(i===1){return 0.05*svg_width-10;// } else if (d === \"March\") {\n}else if(i===2){return 0.05*svg_width-10;// } else if (d === \"April\") {\n}else if(i===3){return 0.05*svg_width-10;}// 2nd row\n// else if (d === \"May\") {\nelse if(i===4){return 0.05*svg_width+9*recs.height-10;// } else if (d === \"June\") {\n}else if(i===5){return 0.05*svg_width+9*recs.height-10;// } else if (d === \"July\") {\n}else if(i===6){return 0.05*svg_width+9*recs.height-10;// } else if (d === \"August\") {\n}else if(i===7){return 0.05*svg_width+9*recs.height-10;}// 3rd row\n// else if (d === \"September\") {\nelse if(i===8){return 0.05*svg_width+18*recs.height-10;// } else if (d === \"October\") {\n}else if(i===9){return 0.05*svg_width+18*recs.height-10;// } else if (d === \"November\") {\n}else if(i===10){return 0.05*svg_width+18*recs.height-10;// } else if (d === \"December\") {\n}else if(i===11){return 0.05*svg_width+18*recs.height-10;}});}setSortMethod(3);}}// function handleSlideChange(event) {\nfunction handleSlideChange(min,max){// console.log(\"Slide changed: \" + event.target.value);\nif(svg){// setIndexThreshold(event.target.value);\n// Setting the filter variables\nsetFilterMin(min);setFilterMax(max);// This is the sample color to be displayed. So the user knows what she/he is filtering. What does 10% of cloud mean?? There's a need for a photo there.\n// // Hard coding colors:\n// const radiation_filter_factor = event.target.value;\n// var color = [];\n// if (radiation_filter_factor < 10) {\n//   // 1.jpg\n//   color = [100, 146, 230];\n// } else if (\n//   radiation_filter_factor >= 10 &&\n//   radiation_filter_factor < 20\n// ) {\n//   // 2.jpg\n//   color = [99, 143, 224];\n// } else if (\n//   radiation_filter_factor >= 20 &&\n//   radiation_filter_factor < 30\n// ) {\n//   // 3.jpg\n//   color = [96, 142, 214];\n// } else if (\n//   radiation_filter_factor >= 30 &&\n//   radiation_filter_factor < 40\n// ) {\n//   // 4.jpg\n//   color = [94, 138, 204];\n// } else if (\n//   radiation_filter_factor >= 40 &&\n//   radiation_filter_factor < 50\n// ) {\n//   // 5.jpg\n//   color = [94, 136, 193];\n// } else if (\n//   radiation_filter_factor >= 50 &&\n//   radiation_filter_factor < 60\n// ) {\n//   // 6.jpg\n//   color = [93, 131, 182];\n// } else if (\n//   radiation_filter_factor >= 60 &&\n//   radiation_filter_factor < 70\n// ) {\n//   // 7.jpg\n//   color = [93, 128, 170];\n// } else if (\n//   radiation_filter_factor >= 70 &&\n//   radiation_filter_factor < 80\n// ) {\n//   // 8.jpg\n//   color = [95, 124, 154];\n// } else if (\n//   radiation_filter_factor >= 80 &&\n//   radiation_filter_factor < 90\n// ) {\n//   // 9.jpg\n//   color = [97, 118, 138];\n// } else if (radiation_filter_factor >= 90) {\n//   // 10.jpg\n//   color = [99, 112, 124];\n// }\n// // Updating the color of the sample\n// document.getElementById(\"color_sample\").style.backgroundColor =\n//   \"rgb(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \")\";\n// Changing the colors of the squares\nsvg.selectAll(\"rect\").transition().duration(800).attr(\"fill\",function(d,i){var cell_radiation_factor=Math.floor(d.c_index/10)*10;var color=[];// If the radiation value of the cell is smaller than the\n//  radiation velue of the threshold (in the slide), we going\n//  to fill it with black\n// if (cell_radiation_factor > radiation_filter_factor) {\nif(cell_radiation_factor<min||cell_radiation_factor>max){// color = [0, 0, 0];\ncolor=[255,255,255];}// Otherwise we fill it with the proper color\nelse{if(cell_radiation_factor<10){// 1.jpg\ncolor=[100,146,230];}else if(cell_radiation_factor>=10&&cell_radiation_factor<20){// 2.jpg\ncolor=[99,143,224];}else if(cell_radiation_factor>=20&&cell_radiation_factor<30){// 3.jpg\ncolor=[96,142,214];}else if(cell_radiation_factor>=30&&cell_radiation_factor<40){// 4.jpg\ncolor=[94,138,204];}else if(cell_radiation_factor>=40&&cell_radiation_factor<50){// 5.jpg\ncolor=[94,136,193];}else if(cell_radiation_factor>=50&&cell_radiation_factor<60){// 6.jpg\ncolor=[93,131,182];}else if(cell_radiation_factor>=60&&cell_radiation_factor<70){// 7.jpg\ncolor=[93,128,170];}else if(cell_radiation_factor>=70&&cell_radiation_factor<80){// 8.jpg\ncolor=[95,124,154];}else if(cell_radiation_factor>=80&&cell_radiation_factor<90){// 9.jpg\ncolor=[97,118,138];}else if(cell_radiation_factor>=90){// 10.jpg\ncolor=[99,112,124];}}return\"rgba(\"+color[0]+\",\"+color[1]+\",\"+color[2]+\", 1)\";});}}function handlePlaySong(){setSortMethod(4);}return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"grid_controlers\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"buttons\",children:[/*#__PURE__*/_jsx(\"button\",{className:sortMethod===2?\"sortingButton selectedButton\":\"sortingButton\",onClick:handleSortLight,children:\"Sort Light\"}),/*#__PURE__*/_jsx(\"button\",{className:sortMethod===1?\"sortingButton selectedButton\":\"sortingButton\",onClick:handleSortDay,children:\"Sort Date\"}),/*#__PURE__*/_jsx(\"button\",{className:sortMethod===3?\"sortingButton selectedButton\":\"sortingButton\",onClick:handleSortMonth,children:\"Group Months\"}),/*#__PURE__*/_jsx(\"button\",{className:sortMethod===4?\"sortingButton selectedButton musicSymbol\":\"sortingButton musicSymbol\",onClick:handlePlaySong,children:\"\\u266B\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"slidecontainer\",children:/*#__PURE__*/_jsx(MultiRangeSlider,{min:0,max:100,onChange:handleSlideChange})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"d3Container\",children:/*#__PURE__*/_jsx(\"svg\",{ref:d3Grid})})]});}export default D3YearGrid;","map":null,"metadata":{},"sourceType":"module"}