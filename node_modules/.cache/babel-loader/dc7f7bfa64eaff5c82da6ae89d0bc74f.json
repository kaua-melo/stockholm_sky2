{"ast":null,"code":"var _jsxFileName = \"/Users/k1/Desktop/stockholm_sky/app/src/hooks/D3YearGrid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { getYear } from \"../services/cloud_data_functions\";\nimport \"../css/D3YearGrid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction D3YearGrid(props) {\n  _s();\n\n  const d3Grid = useRef(); // const [data, setData] = useState([]);\n  // 1 = day_number\n  // 2 = radiation/c_index\n  // 3 = months\n\n  const [sortMethod, setSortMethod] = useState(1);\n  const [svg, setSvg] = useState(null);\n  const [recs, setRecs] = useState({});\n  const [nRecsPerRow, setNRecsPerRow] = useState(null);\n  const [gridGap, setGridGap] = useState({});\n  const [monthsLength, setMonthsLength] = useState({});\n  const [indexThreshold, setIndexThreshold] = useState(100);\n  useEffect(() => {\n    // The data should be all ready when we load this component :)\n    // console.log(\"Inside D3YearGrid!\");\n    // console.log(props.data);\n    // console.log(\"year: \" + props.year);\n    const margin = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    };\n    const width = parseInt(d3.select(\".d3Container\").style(\"width\")); // const height = parseInt(d3.select(\".d3Container\").style(\"height\"));\n\n    const height = 1 * width;\n    const gridGapX = 0;\n    const gridGapY = 0;\n    setGridGap({\n      x: gridGapX,\n      y: gridGapY\n    }); // set up the svg\n\n    const svg_temp = d3.select(d3Grid.current).attr(\"width\", width - margin.left - margin.right).attr(\"height\", height - margin.top - margin.bottom).attr(\"class\", \"D3Svg\") // .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    setSvg(svg_temp);\n    var svg_width = width;\n    var n_recs_per_row = 20;\n    var rec_w = Math.floor(0.7 * svg_width / n_recs_per_row);\n    var rec_h = rec_w;\n    setNRecsPerRow(n_recs_per_row);\n    setRecs({\n      width: rec_w,\n      height: rec_h\n    }); // Add the rectangles\n\n    svg_temp.selectAll(\"rect\") // There's no 'rect' to select. But this is how we do to fill the svg with 'rects'.\n    .data(props.data) // here we load the data\n    .enter().append(\"rect\") // .enter().append() -> for each datapoint in the dataset, add a 'rect'.\n    .attr(\"width\", rec_w).attr(\"height\", rec_h).attr(\"x\", function (d, i) {\n      return i % n_recs_per_row * (rec_w + gridGapX) + 0.15 * svg_width;\n    }).attr(\"y\", function (d, i) {\n      return Math.floor(i / n_recs_per_row) * (rec_h + gridGapY) + 0.15 * svg_width;\n    }).attr(\"fill\", function (d, i) {\n      var bright_color = [100, 146, 230];\n      var dark_color = [99, 112, 124];\n      var factor = Math.floor(d.c_index / 10) * 10; // hard coding colors:\n\n      var color = [];\n\n      if (factor < 10) {\n        // 1.jpg\n        color = [100, 146, 230];\n      } else if (factor >= 10 && factor < 20) {\n        // 2.jpg\n        color = [99, 143, 224];\n      } else if (factor >= 20 && factor < 30) {\n        // 3.jpg\n        color = [96, 142, 214];\n      } else if (factor >= 30 && factor < 40) {\n        // 4.jpg\n        color = [94, 138, 204];\n      } else if (factor >= 40 && factor < 50) {\n        // 5.jpg\n        color = [94, 136, 193];\n      } else if (factor >= 50 && factor < 60) {\n        // 6.jpg\n        color = [93, 131, 182];\n      } else if (factor >= 60 && factor < 70) {\n        // 7.jpg\n        color = [93, 128, 170];\n      } else if (factor >= 70 && factor < 80) {\n        // 8.jpg\n        color = [95, 124, 154];\n      } else if (factor >= 80 && factor < 90) {\n        // 9.jpg\n        color = [97, 118, 138];\n      } else if (factor >= 90) {\n        // 10.jpg\n        color = [99, 112, 124];\n      }\n\n      return \"rgba(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \", 1)\";\n    }).style(\"stroke-opacity\", 1) // set the stroke opacity\n    .style(\"stroke\", \"black\") // set the line colour\n    .style(\"stroke-width\", 0.5) // set the stroke width\n    .html(function (d, i) {\n      return d.day_number;\n    });\n    var monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]; // Adding month labels\n\n    svg_temp.selectAll(\"text\").data(monthNames).enter().append(\"text\").text(function (d) {\n      return d;\n    }).attr(\"x\", -100).attr(\"y\", function (d, i) {\n      return 130 + i * 45;\n    }); // We need to check if the year is a leap year because in that case the month\n    // of february has 29 days instead of 28. This will be essential for sorting\n    // the months visually.\n\n    if (props.data.length === 366) {\n      setMonthsLength({\n        1: 31,\n        2: 29,\n        // February has 29 days in leap years\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n      });\n    } else if (props.data.length === 365) {\n      setMonthsLength({\n        1: 31,\n        2: 28,\n        // February has 28 days in non-leap years\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n      });\n    }\n  }, []);\n\n  function handleSortLight() {\n    // console.log(\"Sort Light\");\n    if (sortMethod !== 2) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n        svg.selectAll(\"rect\").sort(function (x, y) {\n          return d3.ascending(x.c_index, y.c_index);\n        }).transition().duration(2000).attr(\"width\", recs.width).attr(\"height\", recs.height).attr(\"x\", function (d, i) {\n          return i % nRecsPerRow * (recs.width + gridGap.x) + 0.15 * svg_width;\n        }).attr(\"y\", function (d, i) {\n          // console.log(Math.floor(i / 33));\n          return Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) + 0.15 * svg_width;\n        }); // Hiding month labels\n\n        svg.selectAll(\"text\").transition().duration(2000).attr(\"x\", -100).attr(\"y\", function (d, i) {\n          return 130 + i * 45;\n        });\n      }\n\n      setSortMethod(2);\n    }\n  }\n\n  function handleSortDay() {\n    // console.log(\"Sort Day\");\n    if (sortMethod !== 1) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n        svg.selectAll(\"rect\").sort(function (x, y) {\n          return d3.ascending(x.day_number, y.day_number);\n        }).transition().duration(2000).attr(\"width\", recs.width).attr(\"height\", recs.height).attr(\"x\", function (d, i) {\n          return i % nRecsPerRow * (recs.width + gridGap.x) + 0.15 * svg_width;\n        }).attr(\"y\", function (d, i) {\n          // console.log(Math.floor(i / 33));\n          return Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) + 0.15 * svg_width;\n        }); // Hiding month labels\n\n        svg.selectAll(\"text\").transition().duration(2000).attr(\"x\", -100).attr(\"y\", function (d, i) {\n          return 130 + i * 45;\n        });\n        setSortMethod(1);\n      }\n    }\n  }\n\n  function handleSortMonth() {\n    console.log(\"Sort Month\");\n\n    if (sortMethod !== 3) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        console.log(\"Group Month!\");\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n        svg.selectAll(\"rect\").sort(function (x, y) {\n          return d3.ascending(x.day_number, y.day_number);\n        }).transition().duration(2000).attr(\"width\", recs.width).attr(\"height\", recs.height).attr(\"x\", function (d, i) {\n          // This will be useful for knowing how to distribute the\n          //  squares in months. We'll need this logic becausse there are\n          //  leap years, where the month of February has 29 days.\n          let summedDaysPreviousMonth = 0;\n\n          for (let m = 1; m < d.month; m++) {\n            summedDaysPreviousMonth += monthsLength[m];\n          } // January\n\n\n          if (d.month === 1) {\n            return i % 6 * recs.width + 0.05 * svg_width;\n          } // February\n          else if (d.month === 2) {\n              return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 7 * recs.width;\n            } // March\n            else if (d.month === 3) {\n                return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 14 * recs.width;\n              } // April\n              else if (d.month === 4) {\n                  return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 21 * recs.width;\n                } // May\n                else if (d.month === 5) {\n                    return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width;\n                  } // Jun\n                  else if (d.month === 6) {\n                      return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 7 * recs.width;\n                    } // July\n                    else if (d.month === 7) {\n                        return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 14 * recs.width;\n                      } // August\n                      else if (d.month === 8) {\n                          return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 21 * recs.width;\n                        } // September\n                        else if (d.month === 9) {\n                            return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width;\n                          } // October\n                          else if (d.month === 10) {\n                              return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 7 * recs.width;\n                            } // November\n                            else if (d.month === 11) {\n                                return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 14 * recs.width;\n                              } // December\n                              else if (d.month === 12) {\n                                  return (i - summedDaysPreviousMonth) % 6 * recs.width + 0.05 * svg_width + 21 * recs.width;\n                                } else {\n                                  return 500;\n                                }\n        }).attr(\"y\", function (d, i) {\n          // This will be useful for knowing how to distribute the\n          //  squares in months. We'll need this logic becausse there are\n          //  leap years, where the month of February has 29 days.\n          let summedDaysPreviousMonth = 0;\n\n          for (let m = 1; m < d.month; m++) {\n            summedDaysPreviousMonth += monthsLength[m];\n          } // January\n\n\n          if (d.month === 1) {\n            return Math.floor(i / 6) * recs.height + 0.05 * svg_width;\n          } // February\n          else if (d.month === 2) {\n              return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width;\n            } // March\n            else if (d.month === 3) {\n                return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width;\n              } // April\n              else if (d.month === 4) {\n                  return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width;\n                } // May\n                else if (d.month === 5) {\n                    return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width + 9 * recs.height;\n                  } // June\n                  else if (d.month === 6) {\n                      return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width + 9 * recs.height;\n                    } // July\n                    else if (d.month === 7) {\n                        return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width + 9 * recs.height;\n                      } // August\n                      else if (d.month === 8) {\n                          return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width + 9 * recs.height;\n                        } // September\n                        else if (d.month === 9) {\n                            return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width + 18 * recs.height;\n                          } // October\n                          else if (d.month === 10) {\n                              return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width + 18 * recs.height;\n                            } // November\n                            else if (d.month === 11) {\n                                return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width + 18 * recs.height;\n                              } // Dececmber\n                              else if (d.month === 12) {\n                                  return Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height + 0.05 * svg_width + 18 * recs.height;\n                                }\n        }); // Writing months names\n\n        svg.selectAll(\"text\").transition().duration(2000).attr(\"x\", function (d, i) {\n          // if (d === \"January\") {\n          if (i === 0) {\n            return 0.05 * svg_width; // } else if (d === \"February\") {\n          } else if (i === 1) {\n            return 0.05 * svg_width + 7 * recs.width; // } else if (d === \"March\") {\n          } else if (i === 2) {\n            return 0.05 * svg_width + 14 * recs.width; // } else if (d === \"April\") {\n          } else if (i === 3) {\n            return 0.05 * svg_width + 21 * recs.width;\n          } // 2nd row\n          // else if (d === \"May\") {\n          else if (i === 4) {\n              return 0.05 * svg_width; // } else if (d === \"June\") {\n            } else if (i === 5) {\n              return 0.05 * svg_width + 7 * recs.width; // } else if (d === \"July\") {\n            } else if (i === 6) {\n              return 0.05 * svg_width + 14 * recs.width; // } else if (d === \"August\") {\n            } else if (i === 7) {\n              return 0.05 * svg_width + 21 * recs.width;\n            } // 3rd row\n            // else if (d === \"September\") {\n            else if (i === 8) {\n                return 0.05 * svg_width; // } else if (d === \"October\") {\n              } else if (i === 9) {\n                return 0.05 * svg_width + 7 * recs.width; // } else if (d === \"November\") {\n              } else if (i === 10) {\n                return 0.05 * svg_width + 14 * recs.width; // } else if (d === \"December\") {\n              } else if (i === 11) {\n                return 0.05 * svg_width + 21 * recs.width;\n              }\n        }).attr(\"y\", function (d, i) {\n          // if (d === \"January\") {\n          if (i === 0) {\n            return 0.05 * svg_width - 10; // } else if (d === \"February\") {\n          } else if (i === 1) {\n            return 0.05 * svg_width - 10; // } else if (d === \"March\") {\n          } else if (i === 2) {\n            return 0.05 * svg_width - 10; // } else if (d === \"April\") {\n          } else if (i === 3) {\n            return 0.05 * svg_width - 10;\n          } // 2nd row\n          // else if (d === \"May\") {\n          else if (i === 4) {\n              return 0.05 * svg_width + 9 * recs.height - 10; // } else if (d === \"June\") {\n            } else if (i === 5) {\n              return 0.05 * svg_width + 9 * recs.height - 10; // } else if (d === \"July\") {\n            } else if (i === 6) {\n              return 0.05 * svg_width + 9 * recs.height - 10; // } else if (d === \"August\") {\n            } else if (i === 7) {\n              return 0.05 * svg_width + 9 * recs.height - 10;\n            } // 3rd row\n            // else if (d === \"September\") {\n            else if (i === 8) {\n                return 0.05 * svg_width + 18 * recs.height - 10; // } else if (d === \"October\") {\n              } else if (i === 9) {\n                return 0.05 * svg_width + 18 * recs.height - 10; // } else if (d === \"November\") {\n              } else if (i === 10) {\n                return 0.05 * svg_width + 18 * recs.height - 10; // } else if (d === \"December\") {\n              } else if (i === 11) {\n                return 0.05 * svg_width + 18 * recs.height - 10;\n              }\n        });\n      }\n\n      setSortMethod(3);\n    }\n  }\n\n  function handleSlideChange(event) {\n    // console.log(\"Slide changed: \" + event.target.value);\n    if (svg) {\n      setIndexThreshold(event.target.value); // Hard coding colors:\n\n      const radiation_filter_factor = event.target.value;\n      var color = [];\n\n      if (radiation_filter_factor < 10) {\n        // 1.jpg\n        color = [100, 146, 230];\n      } else if (radiation_filter_factor >= 10 && radiation_filter_factor < 20) {\n        // 2.jpg\n        color = [99, 143, 224];\n      } else if (radiation_filter_factor >= 20 && radiation_filter_factor < 30) {\n        // 3.jpg\n        color = [96, 142, 214];\n      } else if (radiation_filter_factor >= 30 && radiation_filter_factor < 40) {\n        // 4.jpg\n        color = [94, 138, 204];\n      } else if (radiation_filter_factor >= 40 && radiation_filter_factor < 50) {\n        // 5.jpg\n        color = [94, 136, 193];\n      } else if (radiation_filter_factor >= 50 && radiation_filter_factor < 60) {\n        // 6.jpg\n        color = [93, 131, 182];\n      } else if (radiation_filter_factor >= 60 && radiation_filter_factor < 70) {\n        // 7.jpg\n        color = [93, 128, 170];\n      } else if (radiation_filter_factor >= 70 && radiation_filter_factor < 80) {\n        // 8.jpg\n        color = [95, 124, 154];\n      } else if (radiation_filter_factor >= 80 && radiation_filter_factor < 90) {\n        // 9.jpg\n        color = [97, 118, 138];\n      } else if (radiation_filter_factor >= 90) {\n        // 10.jpg\n        color = [99, 112, 124];\n      } // Updating the color of the sample\n\n\n      document.getElementById(\"color_sample\").style.backgroundColor = \"rgb(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \")\"; // Changing the colors of the squares\n\n      svg.selectAll(\"rect\").transition().duration(800).attr(\"fill\", function (d, i) {\n        var cell_radiation_factor = Math.floor(d.c_index / 10) * 10;\n        var color = []; // If the radiation value of the cell is smaller than the\n        //  radiation velue of the threshold (in the slide), we going\n        //  to fill it with black\n\n        if (cell_radiation_factor > radiation_filter_factor) {\n          // color = [0, 0, 0];\n          color = [255, 255, 255];\n        } // Otherwise we fill it with the proper color\n        else {\n            if (cell_radiation_factor < 10) {\n              // 1.jpg\n              color = [100, 146, 230];\n            } else if (cell_radiation_factor >= 10 && cell_radiation_factor < 20) {\n              // 2.jpg\n              color = [99, 143, 224];\n            } else if (cell_radiation_factor >= 20 && cell_radiation_factor < 30) {\n              // 3.jpg\n              color = [96, 142, 214];\n            } else if (cell_radiation_factor >= 30 && cell_radiation_factor < 40) {\n              // 4.jpg\n              color = [94, 138, 204];\n            } else if (cell_radiation_factor >= 40 && cell_radiation_factor < 50) {\n              // 5.jpg\n              color = [94, 136, 193];\n            } else if (cell_radiation_factor >= 50 && cell_radiation_factor < 60) {\n              // 6.jpg\n              color = [93, 131, 182];\n            } else if (cell_radiation_factor >= 60 && cell_radiation_factor < 70) {\n              // 7.jpg\n              color = [93, 128, 170];\n            } else if (cell_radiation_factor >= 70 && cell_radiation_factor < 80) {\n              // 8.jpg\n              color = [95, 124, 154];\n            } else if (cell_radiation_factor >= 80 && cell_radiation_factor < 90) {\n              // 9.jpg\n              color = [97, 118, 138];\n            } else if (cell_radiation_factor >= 90) {\n              // 10.jpg\n              color = [99, 112, 124];\n            }\n          }\n\n        return \"rgba(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \", 1)\";\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid_controlers\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"oi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 770,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 769,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 768,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d3Container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: d3Grid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 798,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 797,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 767,\n    columnNumber: 5\n  }, this);\n}\n\n_s(D3YearGrid, \"mPVpCrV/PjxIWwDHGPEXBe5Wfjo=\");\n\n_c = D3YearGrid;\nexport default D3YearGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"D3YearGrid\");","map":{"version":3,"sources":["/Users/k1/Desktop/stockholm_sky/app/src/hooks/D3YearGrid.jsx"],"names":["React","useEffect","useRef","useState","d3","getYear","D3YearGrid","props","d3Grid","sortMethod","setSortMethod","svg","setSvg","recs","setRecs","nRecsPerRow","setNRecsPerRow","gridGap","setGridGap","monthsLength","setMonthsLength","indexThreshold","setIndexThreshold","margin","top","right","bottom","left","width","parseInt","select","style","height","gridGapX","gridGapY","x","y","svg_temp","current","attr","svg_width","n_recs_per_row","rec_w","Math","floor","rec_h","selectAll","data","enter","append","d","i","bright_color","dark_color","factor","c_index","color","html","day_number","monthNames","text","length","handleSortLight","replace","sort","ascending","transition","duration","handleSortDay","handleSortMonth","console","log","summedDaysPreviousMonth","m","month","handleSlideChange","event","target","value","radiation_filter_factor","document","getElementById","backgroundColor","cell_radiation_factor"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nimport { getYear } from \"../services/cloud_data_functions\";\n\nimport \"../css/D3YearGrid.css\";\n\nfunction D3YearGrid(props) {\n  const d3Grid = useRef();\n  // const [data, setData] = useState([]);\n  // 1 = day_number\n  // 2 = radiation/c_index\n  // 3 = months\n  const [sortMethod, setSortMethod] = useState(1);\n  const [svg, setSvg] = useState(null);\n  const [recs, setRecs] = useState({});\n  const [nRecsPerRow, setNRecsPerRow] = useState(null);\n  const [gridGap, setGridGap] = useState({});\n  const [monthsLength, setMonthsLength] = useState({});\n  const [indexThreshold, setIndexThreshold] = useState(100);\n\n  useEffect(() => {\n    // The data should be all ready when we load this component :)\n    // console.log(\"Inside D3YearGrid!\");\n    // console.log(props.data);\n    // console.log(\"year: \" + props.year);\n\n    const margin = { top: 0, right: 0, bottom: 0, left: 0 };\n    const width = parseInt(d3.select(\".d3Container\").style(\"width\"));\n    // const height = parseInt(d3.select(\".d3Container\").style(\"height\"));\n    const height = 1 * width;\n    const gridGapX = 0;\n    const gridGapY = 0;\n    setGridGap({ x: gridGapX, y: gridGapY });\n\n    // set up the svg\n    const svg_temp = d3\n      .select(d3Grid.current)\n      .attr(\"width\", width - margin.left - margin.right)\n      .attr(\"height\", height - margin.top - margin.bottom)\n      .attr(\"class\", \"D3Svg\")\n      // .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    setSvg(svg_temp);\n\n    var svg_width = width;\n    var n_recs_per_row = 20;\n    var rec_w = Math.floor((0.7 * svg_width) / n_recs_per_row);\n    var rec_h = rec_w;\n    setNRecsPerRow(n_recs_per_row);\n    setRecs({ width: rec_w, height: rec_h });\n\n    // Add the rectangles\n    svg_temp\n      .selectAll(\"rect\") // There's no 'rect' to select. But this is how we do to fill the svg with 'rects'.\n      .data(props.data) // here we load the data\n      .enter()\n      .append(\"rect\") // .enter().append() -> for each datapoint in the dataset, add a 'rect'.\n      .attr(\"width\", rec_w)\n      .attr(\"height\", rec_h)\n      .attr(\"x\", function (d, i) {\n        return (i % n_recs_per_row) * (rec_w + gridGapX) + 0.15 * svg_width;\n      })\n      .attr(\"y\", function (d, i) {\n        return (\n          Math.floor(i / n_recs_per_row) * (rec_h + gridGapY) + 0.15 * svg_width\n        );\n      })\n      .attr(\"fill\", function (d, i) {\n        var bright_color = [100, 146, 230];\n        var dark_color = [99, 112, 124];\n\n        var factor = Math.floor(d.c_index / 10) * 10;\n\n        // hard coding colors:\n        var color = [];\n        if (factor < 10) {\n          // 1.jpg\n          color = [100, 146, 230];\n        } else if (factor >= 10 && factor < 20) {\n          // 2.jpg\n          color = [99, 143, 224];\n        } else if (factor >= 20 && factor < 30) {\n          // 3.jpg\n          color = [96, 142, 214];\n        } else if (factor >= 30 && factor < 40) {\n          // 4.jpg\n          color = [94, 138, 204];\n        } else if (factor >= 40 && factor < 50) {\n          // 5.jpg\n          color = [94, 136, 193];\n        } else if (factor >= 50 && factor < 60) {\n          // 6.jpg\n          color = [93, 131, 182];\n        } else if (factor >= 60 && factor < 70) {\n          // 7.jpg\n          color = [93, 128, 170];\n        } else if (factor >= 70 && factor < 80) {\n          // 8.jpg\n          color = [95, 124, 154];\n        } else if (factor >= 80 && factor < 90) {\n          // 9.jpg\n          color = [97, 118, 138];\n        } else if (factor >= 90) {\n          // 10.jpg\n          color = [99, 112, 124];\n        }\n        return \"rgba(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \", 1)\";\n      })\n      .style(\"stroke-opacity\", 1) // set the stroke opacity\n      .style(\"stroke\", \"black\") // set the line colour\n      .style(\"stroke-width\", 0.5) // set the stroke width\n\n      .html(function (d, i) {\n        return d.day_number;\n      });\n\n    var monthNames = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n\n    // Adding month labels\n    svg_temp\n      .selectAll(\"text\")\n      .data(monthNames)\n      .enter()\n      .append(\"text\")\n      .text(function (d) {\n        return d;\n      })\n      .attr(\"x\", -100)\n      .attr(\"y\", function (d, i) {\n        return 130 + i * 45;\n      });\n\n    // We need to check if the year is a leap year because in that case the month\n    // of february has 29 days instead of 28. This will be essential for sorting\n    // the months visually.\n\n    if (props.data.length === 366) {\n      setMonthsLength({\n        1: 31,\n        2: 29, // February has 29 days in leap years\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31,\n      });\n    } else if (props.data.length === 365) {\n      setMonthsLength({\n        1: 31,\n        2: 28, // February has 28 days in non-leap years\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31,\n      });\n    }\n  }, []);\n\n  function handleSortLight() {\n    // console.log(\"Sort Light\");\n\n    if (sortMethod !== 2) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n\n        svg\n          .selectAll(\"rect\")\n          .sort(function (x, y) {\n            return d3.ascending(x.c_index, y.c_index);\n          })\n          .transition()\n          .duration(2000)\n          .attr(\"width\", recs.width)\n          .attr(\"height\", recs.height)\n          .attr(\"x\", function (d, i) {\n            return (\n              (i % nRecsPerRow) * (recs.width + gridGap.x) + 0.15 * svg_width\n            );\n          })\n          .attr(\"y\", function (d, i) {\n            // console.log(Math.floor(i / 33));\n            return (\n              Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n              0.15 * svg_width\n            );\n          });\n\n        // Hiding month labels\n        svg\n          .selectAll(\"text\")\n          .transition()\n          .duration(2000)\n          .attr(\"x\", -100)\n          .attr(\"y\", function (d, i) {\n            return 130 + i * 45;\n          });\n      }\n\n      setSortMethod(2);\n    }\n  }\n\n  function handleSortDay() {\n    // console.log(\"Sort Day\");\n\n    if (sortMethod !== 1) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n\n        svg\n          .selectAll(\"rect\")\n          .sort(function (x, y) {\n            return d3.ascending(x.day_number, y.day_number);\n          })\n          .transition()\n          .duration(2000)\n          .attr(\"width\", recs.width)\n          .attr(\"height\", recs.height)\n          .attr(\"x\", function (d, i) {\n            return (\n              (i % nRecsPerRow) * (recs.width + gridGap.x) + 0.15 * svg_width\n            );\n          })\n          .attr(\"y\", function (d, i) {\n            // console.log(Math.floor(i / 33));\n            return (\n              Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n              0.15 * svg_width\n            );\n          });\n\n        // Hiding month labels\n        svg\n          .selectAll(\"text\")\n          .transition()\n          .duration(2000)\n          .attr(\"x\", -100)\n          .attr(\"y\", function (d, i) {\n            return 130 + i * 45;\n          });\n\n        setSortMethod(1);\n      }\n    }\n  }\n\n  function handleSortMonth() {\n    console.log(\"Sort Month\");\n\n    if (sortMethod !== 3) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        console.log(\"Group Month!\");\n\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n\n        svg\n          .selectAll(\"rect\")\n          .sort(function (x, y) {\n            return d3.ascending(x.day_number, y.day_number);\n          })\n          .transition()\n          .duration(2000)\n          .attr(\"width\", recs.width)\n          .attr(\"height\", recs.height)\n          .attr(\"x\", function (d, i) {\n            // This will be useful for knowing how to distribute the\n            //  squares in months. We'll need this logic becausse there are\n            //  leap years, where the month of February has 29 days.\n            let summedDaysPreviousMonth = 0;\n            for (let m = 1; m < d.month; m++) {\n              summedDaysPreviousMonth += monthsLength[m];\n            }\n\n            // January\n            if (d.month === 1) {\n              return (i % 6) * recs.width + 0.05 * svg_width;\n            }\n\n            // February\n            else if (d.month === 2) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                7 * recs.width\n              );\n            }\n\n            // March\n            else if (d.month === 3) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                14 * recs.width\n              );\n            }\n\n            // April\n            else if (d.month === 4) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                21 * recs.width\n              );\n            }\n\n            // May\n            else if (d.month === 5) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width\n              );\n            }\n\n            // Jun\n            else if (d.month === 6) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                7 * recs.width\n              );\n            }\n\n            // July\n            else if (d.month === 7) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                14 * recs.width\n              );\n            }\n\n            // August\n            else if (d.month === 8) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                21 * recs.width\n              );\n            }\n\n            // September\n            else if (d.month === 9) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width\n              );\n            }\n\n            // October\n            else if (d.month === 10) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                7 * recs.width\n              );\n            }\n\n            // November\n            else if (d.month === 11) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                14 * recs.width\n              );\n            }\n\n            // December\n            else if (d.month === 12) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                21 * recs.width\n              );\n            } else {\n              return 500;\n            }\n          })\n          .attr(\"y\", function (d, i) {\n            // This will be useful for knowing how to distribute the\n            //  squares in months. We'll need this logic becausse there are\n            //  leap years, where the month of February has 29 days.\n            let summedDaysPreviousMonth = 0;\n            for (let m = 1; m < d.month; m++) {\n              summedDaysPreviousMonth += monthsLength[m];\n            }\n\n            // January\n            if (d.month === 1) {\n              return Math.floor(i / 6) * recs.height + 0.05 * svg_width;\n            }\n\n            // February\n            else if (d.month === 2) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width\n              );\n            }\n\n            // March\n            else if (d.month === 3) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width\n              );\n            }\n\n            // April\n            else if (d.month === 4) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width\n              );\n            }\n\n            // May\n            else if (d.month === 5) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                9 * recs.height\n              );\n            }\n\n            // June\n            else if (d.month === 6) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                9 * recs.height\n              );\n            }\n\n            // July\n            else if (d.month === 7) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                9 * recs.height\n              );\n            }\n\n            // August\n            else if (d.month === 8) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                9 * recs.height\n              );\n            }\n\n            // September\n            else if (d.month === 9) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                18 * recs.height\n              );\n            }\n\n            // October\n            else if (d.month === 10) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                18 * recs.height\n              );\n            }\n\n            // November\n            else if (d.month === 11) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                18 * recs.height\n              );\n            }\n\n            // Dececmber\n            else if (d.month === 12) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                18 * recs.height\n              );\n            }\n          });\n\n        // Writing months names\n        svg\n          .selectAll(\"text\")\n          .transition()\n          .duration(2000)\n          .attr(\"x\", function (d, i) {\n            // if (d === \"January\") {\n            if (i === 0) {\n              return 0.05 * svg_width;\n              // } else if (d === \"February\") {\n            } else if (i === 1) {\n              return 0.05 * svg_width + 7 * recs.width;\n              // } else if (d === \"March\") {\n            } else if (i === 2) {\n              return 0.05 * svg_width + 14 * recs.width;\n              // } else if (d === \"April\") {\n            } else if (i === 3) {\n              return 0.05 * svg_width + 21 * recs.width;\n            }\n            // 2nd row\n            // else if (d === \"May\") {\n            else if (i === 4) {\n              return 0.05 * svg_width;\n              // } else if (d === \"June\") {\n            } else if (i === 5) {\n              return 0.05 * svg_width + 7 * recs.width;\n              // } else if (d === \"July\") {\n            } else if (i === 6) {\n              return 0.05 * svg_width + 14 * recs.width;\n              // } else if (d === \"August\") {\n            } else if (i === 7) {\n              return 0.05 * svg_width + 21 * recs.width;\n            }\n            // 3rd row\n            // else if (d === \"September\") {\n            else if (i === 8) {\n              return 0.05 * svg_width;\n              // } else if (d === \"October\") {\n            } else if (i === 9) {\n              return 0.05 * svg_width + 7 * recs.width;\n              // } else if (d === \"November\") {\n            } else if (i === 10) {\n              return 0.05 * svg_width + 14 * recs.width;\n              // } else if (d === \"December\") {\n            } else if (i === 11) {\n              return 0.05 * svg_width + 21 * recs.width;\n            }\n          })\n          .attr(\"y\", function (d, i) {\n            // if (d === \"January\") {\n            if (i === 0) {\n              return 0.05 * svg_width - 10;\n              // } else if (d === \"February\") {\n            } else if (i === 1) {\n              return 0.05 * svg_width - 10;\n              // } else if (d === \"March\") {\n            } else if (i === 2) {\n              return 0.05 * svg_width - 10;\n              // } else if (d === \"April\") {\n            } else if (i === 3) {\n              return 0.05 * svg_width - 10;\n            }\n\n            // 2nd row\n            // else if (d === \"May\") {\n            else if (i === 4) {\n              return 0.05 * svg_width + 9 * recs.height - 10;\n              // } else if (d === \"June\") {\n            } else if (i === 5) {\n              return 0.05 * svg_width + 9 * recs.height - 10;\n              // } else if (d === \"July\") {\n            } else if (i === 6) {\n              return 0.05 * svg_width + 9 * recs.height - 10;\n              // } else if (d === \"August\") {\n            } else if (i === 7) {\n              return 0.05 * svg_width + 9 * recs.height - 10;\n            }\n            // 3rd row\n            // else if (d === \"September\") {\n            else if (i === 8) {\n              return 0.05 * svg_width + 18 * recs.height - 10;\n              // } else if (d === \"October\") {\n            } else if (i === 9) {\n              return 0.05 * svg_width + 18 * recs.height - 10;\n              // } else if (d === \"November\") {\n            } else if (i === 10) {\n              return 0.05 * svg_width + 18 * recs.height - 10;\n              // } else if (d === \"December\") {\n            } else if (i === 11) {\n              return 0.05 * svg_width + 18 * recs.height - 10;\n            }\n          });\n      }\n\n      setSortMethod(3);\n    }\n  }\n\n  function handleSlideChange(event) {\n    // console.log(\"Slide changed: \" + event.target.value);\n\n    if (svg) {\n      setIndexThreshold(event.target.value);\n\n      // Hard coding colors:\n      const radiation_filter_factor = event.target.value;\n\n      var color = [];\n      if (radiation_filter_factor < 10) {\n        // 1.jpg\n        color = [100, 146, 230];\n      } else if (\n        radiation_filter_factor >= 10 &&\n        radiation_filter_factor < 20\n      ) {\n        // 2.jpg\n        color = [99, 143, 224];\n      } else if (\n        radiation_filter_factor >= 20 &&\n        radiation_filter_factor < 30\n      ) {\n        // 3.jpg\n        color = [96, 142, 214];\n      } else if (\n        radiation_filter_factor >= 30 &&\n        radiation_filter_factor < 40\n      ) {\n        // 4.jpg\n        color = [94, 138, 204];\n      } else if (\n        radiation_filter_factor >= 40 &&\n        radiation_filter_factor < 50\n      ) {\n        // 5.jpg\n        color = [94, 136, 193];\n      } else if (\n        radiation_filter_factor >= 50 &&\n        radiation_filter_factor < 60\n      ) {\n        // 6.jpg\n        color = [93, 131, 182];\n      } else if (\n        radiation_filter_factor >= 60 &&\n        radiation_filter_factor < 70\n      ) {\n        // 7.jpg\n        color = [93, 128, 170];\n      } else if (\n        radiation_filter_factor >= 70 &&\n        radiation_filter_factor < 80\n      ) {\n        // 8.jpg\n        color = [95, 124, 154];\n      } else if (\n        radiation_filter_factor >= 80 &&\n        radiation_filter_factor < 90\n      ) {\n        // 9.jpg\n        color = [97, 118, 138];\n      } else if (radiation_filter_factor >= 90) {\n        // 10.jpg\n        color = [99, 112, 124];\n      }\n      // Updating the color of the sample\n      document.getElementById(\"color_sample\").style.backgroundColor =\n        \"rgb(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \")\";\n\n      // Changing the colors of the squares\n      svg\n        .selectAll(\"rect\")\n        .transition()\n        .duration(800)\n        .attr(\"fill\", function (d, i) {\n          var cell_radiation_factor = Math.floor(d.c_index / 10) * 10;\n\n          var color = [];\n\n          // If the radiation value of the cell is smaller than the\n          //  radiation velue of the threshold (in the slide), we going\n          //  to fill it with black\n          if (cell_radiation_factor > radiation_filter_factor) {\n            // color = [0, 0, 0];\n            color = [255, 255, 255];\n          }\n          // Otherwise we fill it with the proper color\n          else {\n            if (cell_radiation_factor < 10) {\n              // 1.jpg\n              color = [100, 146, 230];\n            } else if (\n              cell_radiation_factor >= 10 &&\n              cell_radiation_factor < 20\n            ) {\n              // 2.jpg\n              color = [99, 143, 224];\n            } else if (\n              cell_radiation_factor >= 20 &&\n              cell_radiation_factor < 30\n            ) {\n              // 3.jpg\n              color = [96, 142, 214];\n            } else if (\n              cell_radiation_factor >= 30 &&\n              cell_radiation_factor < 40\n            ) {\n              // 4.jpg\n              color = [94, 138, 204];\n            } else if (\n              cell_radiation_factor >= 40 &&\n              cell_radiation_factor < 50\n            ) {\n              // 5.jpg\n              color = [94, 136, 193];\n            } else if (\n              cell_radiation_factor >= 50 &&\n              cell_radiation_factor < 60\n            ) {\n              // 6.jpg\n              color = [93, 131, 182];\n            } else if (\n              cell_radiation_factor >= 60 &&\n              cell_radiation_factor < 70\n            ) {\n              // 7.jpg\n              color = [93, 128, 170];\n            } else if (\n              cell_radiation_factor >= 70 &&\n              cell_radiation_factor < 80\n            ) {\n              // 8.jpg\n              color = [95, 124, 154];\n            } else if (\n              cell_radiation_factor >= 80 &&\n              cell_radiation_factor < 90\n            ) {\n              // 9.jpg\n              color = [97, 118, 138];\n            } else if (cell_radiation_factor >= 90) {\n              // 10.jpg\n              color = [99, 112, 124];\n            }\n          }\n\n          return \"rgba(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \", 1)\";\n        });\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"grid_controlers\">\n        <div className=\"buttons\">\n          <p>oi</p>\n          {/* <button className=\"sortingButton\" onClick={handleSortLight}>\n            Sort Light\n          </button>\n          <button className=\"sortingButton\" onClick={handleSortDay}>\n            Sort Date\n          </button>\n          <button className=\"sortingButton\" onClick={handleSortMonth}>\n            Group Months\n          </button> */}\n        </div>\n\n        {/* <div className=\"slidecontainer\">\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            defaultValue=\"100\"\n            className=\"slider\"\n            id=\"colorSlider\"\n            onInput={handleSlideChange}\n          />\n          <p id=\"slide_value_p\"> {indexThreshold}</p>\n          <div id=\"color_sample\"></div>\n        </div> */}\n      </div>\n\n      <div className=\"d3Container\">\n        <svg ref={d3Grid}></svg>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default D3YearGrid;\n"]},"metadata":{},"sourceType":"module"}