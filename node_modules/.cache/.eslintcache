[{"/Users/k1/Desktop/stockholm_sky/app/src/index.js":"1","/Users/k1/Desktop/stockholm_sky/app/src/reportWebVitals.js":"2","/Users/k1/Desktop/stockholm_sky/app/src/App.js":"3","/Users/k1/Desktop/stockholm_sky/app/src/hooks/yearGrid.jsx":"4","/Users/k1/Desktop/stockholm_sky/app/src/hooks/yearPanelSmall.jsx":"5","/Users/k1/Desktop/stockholm_sky/app/src/hooks/hidenMenu.jsx":"6","/Users/k1/Desktop/stockholm_sky/app/src/hooks/aDaySkyPhoto.jsx":"7","/Users/k1/Desktop/stockholm_sky/app/src/hooks/yearGridSmall.jsx":"8","/Users/k1/Desktop/stockholm_sky/app/src/hooks/aDaySkyPhotoSmall.jsx":"9","/Users/k1/Desktop/stockholm_sky/app/src/services/years_data_small_for_testing.js":"10","/Users/k1/Desktop/stockholm_sky/app/src/services/2015_radiation.js":"11","/Users/k1/Desktop/stockholm_sky/app/src/services/cloud_data_functions.js":"12","/Users/k1/Desktop/stockholm_sky/app/src/services/cloud_1756_2018.js":"13","/Users/k1/Desktop/stockholm_sky/app/src/hooks/D3YearGrid.jsx":"14","/Users/k1/Desktop/stockholm_sky/app/src/hooks/MultiRangeSlider.jsx":"15","/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/index.js":"16","/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/reportWebVitals.js":"17","/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/App.js":"18","/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/yearGrid.jsx":"19","/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/hidenMenu.jsx":"20","/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/yearPanelSmall.jsx":"21","/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/services/cloud_data_functions.js":"22","/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/D3YearGrid.jsx":"23","/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/aDaySkyPhoto.jsx":"24","/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/yearGridSmall.jsx":"25","/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/services/cloud_1756_2018.js":"26","/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/aDaySkyPhotoSmall.jsx":"27","/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/MultiRangeSlider.jsx":"28"},{"size":500,"mtime":1622551212562,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1622551212562,"results":"31","hashOfConfig":"30"},{"size":3019,"mtime":1623942100351,"results":"32","hashOfConfig":"30"},{"size":321,"mtime":1622644302746,"results":"33","hashOfConfig":"30"},{"size":1641,"mtime":1624000271341,"results":"34","hashOfConfig":"30"},{"size":369,"mtime":1622557020468,"results":"35","hashOfConfig":"30"},{"size":609,"mtime":1622641421811,"results":"36","hashOfConfig":"30"},{"size":2578,"mtime":1623744627785,"results":"37","hashOfConfig":"30"},{"size":1661,"mtime":1622820882312,"results":"38","hashOfConfig":"30"},{"size":41401,"mtime":1622822507429,"results":"39","hashOfConfig":"30"},{"size":13842,"mtime":1623054035854,"results":"40","hashOfConfig":"30"},{"size":179,"mtime":1623744657700,"results":"41","hashOfConfig":"30"},{"size":5671758,"mtime":1623743336118,"results":"42","hashOfConfig":"30"},{"size":25557,"mtime":1624016787263,"results":"43","hashOfConfig":"30"},{"size":2997,"mtime":1624016224229,"results":"44","hashOfConfig":"30"},{"size":500,"mtime":1622551212562,"results":"45","hashOfConfig":"46"},{"size":362,"mtime":1622551212562,"results":"47","hashOfConfig":"46"},{"size":3019,"mtime":1623942100351,"results":"48","hashOfConfig":"46"},{"size":321,"mtime":1622644302746,"results":"49","hashOfConfig":"46"},{"size":369,"mtime":1622557020468,"results":"50","hashOfConfig":"46"},{"size":1641,"mtime":1624000271341,"results":"51","hashOfConfig":"46"},{"size":179,"mtime":1623744657700,"results":"52","hashOfConfig":"46"},{"size":32603,"mtime":1624194069200,"results":"53","hashOfConfig":"46"},{"size":609,"mtime":1622641421811,"results":"54","hashOfConfig":"46"},{"size":2578,"mtime":1623744627785,"results":"55","hashOfConfig":"46"},{"size":5671758,"mtime":1623743336118,"results":"56","hashOfConfig":"46"},{"size":1661,"mtime":1622820882312,"results":"57","hashOfConfig":"46"},{"size":2997,"mtime":1624016224229,"results":"58","hashOfConfig":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"rngb4u",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"61"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"61"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"61"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"61"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"61"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"61"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n7kh9z",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/k1/Desktop/stockholm_sky/app/src/index.js",[],["123","124"],"/Users/k1/Desktop/stockholm_sky/app/src/reportWebVitals.js",[],"/Users/k1/Desktop/stockholm_sky/app/src/App.js",["125"],"import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport \"./hooks/hidenMenu\";\nimport \"./hooks/yearGrid\";\n\nimport HidenMenu from \"./hooks/hidenMenu\";\nimport YearGrid from \"./hooks/yearGrid\";\nimport YearPanelSmall from \"./hooks/yearPanelSmall\";\n\nfunction App() {\n  const [yearsShowing, setYearsShowing] = useState([]);\n  const [yearSelected, setYearSelected] = useState(1756);\n\n  // useEffect(() => {\n  //   // This function is executed every time the component is rendered.\n  //   // So it's the same as calling both:\n  //   // componentDidMount -> the first time the component is mounted.\n  //   // componentDidUpdate -> when receives new props or the state changes.\n  //   const temp = getYear(1756);\n  //   console.log(temp);\n  // }, []); // this array that is passed as the second parameter of the useEffect function indicates which variables are the triggers to call useEffect. If these variables change, the useEffect will be called. If we don't have this array, the function will be called on any props/state change.\n\n  function handleAddGrid() {\n    // Cloning 'yearsShowing' array.\n    let yearsShowingCopy = [...yearsShowing];\n\n    // Add the new year\n    yearsShowingCopy.push(yearSelected);\n\n    // Updating the state.\n    setYearsShowing(yearsShowingCopy);\n  }\n\n  function handleYearChange(e) {\n    setYearSelected(parseInt(e.target.value));\n    // console.log(e.target.value);\n  }\n\n  function handleDeleteGrid(yearToBeDeleted) {\n    // Cloning the array\n    const yearsShowingTemp = [...yearsShowing];\n\n    // Finding the index of the 'yearToBeDeleted' in our list\n    const index = yearsShowingTemp.indexOf(yearToBeDeleted);\n\n    // Removing the 'yearToBeDeleted' from the list\n    yearsShowingTemp.splice(index, 1);\n\n    setYearsShowing(yearsShowingTemp);\n  }\n\n  return (\n    <div className=\"App\">\n      {/* <div className=\"hidenMenuDiv\">\n        <HidenMenu />\n      </div> */}\n\n      <div className=\"tempMenu\">\n        <button className=\"addGridButton\" onClick={handleAddGrid}>\n          Add\n        </button>\n\n        <select name=\"years\" onChange={handleYearChange}>\n          {/* Here we create an array with 262 values. [0,1,...,261] \n              For each item we add 1756 so we can have an array with [1756,...,2018]\n              We loop through it to create the dropdown options */}\n          {Array.from(Array(263).keys())\n            .map((x) => x + 1756)\n            .map((i) => (\n              <option value={i} key={i}>\n                {i}\n              </option>\n            ))}\n        </select>\n      </div>\n\n      {yearsShowing.length === 1000000000 ? (\n        <div className=\"fullScreenGridDiv\">\n          <YearGrid />\n        </div>\n      ) : (\n        <div className=\"gridsComparisonContainer\">\n          {yearsShowing.map((y) => (\n            <YearPanelSmall key={y} year={y} onDelete={handleDeleteGrid} />\n          ))}\n        </div>\n      )}\n\n      {/* <div className=\"testingDiv\">\n        <YearPanelSmall />\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/k1/Desktop/stockholm_sky/app/src/hooks/yearGrid.jsx",["126"],"import React, { useState } from \"react\";\nimport ADaySkyPhoto from \"./aDaySkyPhoto\";\nimport \"../css/yearGrid.css\";\n\nfunction YearGrid(props) {\n  return (\n    <div className=\"yearGrid\">\n      {Array.from(Array(365).keys()).map((i) => (\n        <ADaySkyPhoto key={i} />\n      ))}\n    </div>\n  );\n}\n\nexport default YearGrid;\n","/Users/k1/Desktop/stockholm_sky/app/src/hooks/yearPanelSmall.jsx",["127","128","129"],"/Users/k1/Desktop/stockholm_sky/app/src/hooks/hidenMenu.jsx",["130"],"import React, { useState } from \"react\";\nimport \"../css/hidenMenu.css\";\n\nfunction HidenMenu(props) {\n  function handleAddGrid() {\n    console.log(\"Add grid!\");\n  }\n\n  return (\n    <div className=\"hidenMenu\">\n      <button type=\"button\" onClick={handleAddGrid}>\n        Add\n      </button>\n      <p>Other options here...</p>\n    </div>\n  );\n}\n\nexport default HidenMenu;\n","/Users/k1/Desktop/stockholm_sky/app/src/hooks/aDaySkyPhoto.jsx",["131"],"import React, { Fragment, useState } from \"react\";\nimport \"../css/aDaySkyPhoto.css\";\n\nfunction ADaySkyPhoto(props) {\n  return (\n    <Fragment>\n      <div\n        className=\"skyPhotoDiv\"\n        style={{\n          backgroundImage: \"url(/photos/20210601.jpg)\",\n          backgroundPosition: \"center\",\n          backgroundSize: \"cover\",\n          backgroundRepeat: \"no-repeat\",\n        }}\n      >\n        {/* <img\n          className=\"skyPhoto\"\n          src={process.env.PUBLIC_URL + \"photos/20210601.jpg\"}\n          alt=\".\"\n        ></img> */}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default ADaySkyPhoto;\n","/Users/k1/Desktop/stockholm_sky/app/src/hooks/yearGridSmall.jsx",["132","133","134","135"],"import React, { useState, useEffect } from \"react\";\nimport ADaySkyPhotoSmall from \"./aDaySkyPhotoSmall\";\nimport \"../css/yearGridSmall.css\";\n\nimport { getYear } from \"../services/cloud_data_functions\";\n\nfunction YearGridSmall(props) {\n  const [yearsDataFormatted, setYearsDataFormatted] = useState(null);\n\n  useEffect(() => {\n    // This function is executed every time the component is rendered.\n    // So it's the same as calling both:\n    // componentDidMount -> the first time the component is mounted.\n    // componentDidUpdate -> when receives new props or the state changes.\n\n    // Getting the years data.\n    const yearsDataRaw = getYear(props.year);\n\n    // This is the array in which we'll temporarily store the\n    //  data of the year, formatted in a clean way so we can\n    //  pass to the 'aDaySkyPhotoSmall' hook.\n    let yearsDataFormatted_temp = [];\n\n    // Looping through each month\n    yearsDataRaw.months.map((m) => {\n      // Looping the days of the month\n      m.days.map((d) => {\n        // console.log(d);\n        yearsDataFormatted_temp.push({\n          month: m.month,\n          day: d.day,\n          c_index: d.c_index,\n        });\n      });\n    });\n\n    setYearsDataFormatted(yearsDataFormatted_temp);\n  }, []); // this array that is passed as the second parameter of the useEffect function indicates which variables are the triggers to call useEffect. If these variables change, the useEffect will be called. If we don't have this array, the function will be called on any props/state change.\n\n  function printYearsDataRaw() {\n    console.log(yearsDataFormatted);\n  }\n\n  return (\n    <div className=\"yearGridSmall\">\n      {/* We are temporarily using this button just to show the data loadaded. For debugging. */}\n      {/* <button onClick={printYearsDataRaw}></button> */}\n\n      {/* It takes a while for the 'yearsDataFormatted' to be ready (we create it in the 'useEffect')  \n          So we must first need to check whether it isn't null yet before we try to display the photos, \n          otherwise the app will break */}\n      {yearsDataFormatted != null ? (\n        yearsDataFormatted.map((data_day, index) => (\n          <ADaySkyPhotoSmall\n            key={index}\n            year={props.year}\n            cloudData={data_day}\n          />\n        ))\n      ) : (\n        <h1>loading</h1>\n      )}\n\n      {/* {Array.from(Array(365).keys()).map((i) => (\n        <ADaySkyPhotoSmall\n          key={i}\n          year={props.year}\n          cloudData={yearsDataFormatted}\n        />\n      ))} */}\n    </div>\n  );\n}\n\nexport default YearGridSmall;\n","/Users/k1/Desktop/stockholm_sky/app/src/hooks/aDaySkyPhotoSmall.jsx",["136","137"],"import React, { Fragment, useState, useEffect } from \"react\";\nimport \"../css/aDaySkyPhotoSmall.css\";\n\nfunction ADaySkyPhotoSmall(props) {\n  const [img_src, setImg_src] = useState(null);\n\n  useEffect(() => {\n    // This function is executed every time the component is rendered.\n    // So it's the same as calling both:\n    // componentDidMount -> the first time the component is mounted.\n    // componentDidUpdate -> when receives new props or the state changes.\n\n    // Let's check what's the c_index so we can decide which photo to show.\n    // c_index goes from 0 to 100.\n    // Ex:\n    // if it's between [0 - 9] let's get the image 1.jpg\n    // if it's between [10-20]  let's get the image 2.jpg\n    // ...\n    // if it's between [90-100]  let's get the image 10.jpg\n    let photo_number = Math.floor(props.cloudData.c_index / 10) + 1;\n    if (photo_number > 10) {\n      photo_number = 10;\n    }\n\n    const photo_name =\n      process.env.PUBLIC_URL +\n      \"photos/photos_photoshop/\" +\n      photo_number +\n      \".jpg\";\n\n    setImg_src(photo_name);\n  }, []); // this array that is passed as the second parameter of the useEffect function indicates which variables are the triggers to call useEffect. If these variables change, the useEffect will be called. If we don't have this array, the function will be called on any props/state change.\n\n  return (\n    <div>\n      {img_src != null ? (\n        <img\n          className=\"skyPhoto\"\n          // src={process.env.PUBLIC_URL + \"photos/20210601.jpg\"}\n          src={img_src}\n          alt=\".\"\n        ></img>\n      ) : (\n        <p>Loading</p>\n      )}\n    </div>\n  );\n}\n\nexport default ADaySkyPhotoSmall;\n","/Users/k1/Desktop/stockholm_sky/app/src/services/years_data_small_for_testing.js",[],"/Users/k1/Desktop/stockholm_sky/app/src/services/2015_radiation.js",[],"/Users/k1/Desktop/stockholm_sky/app/src/services/cloud_data_functions.js",[],"/Users/k1/Desktop/stockholm_sky/app/src/services/cloud_1756_2018.js",[],"/Users/k1/Desktop/stockholm_sky/app/src/hooks/D3YearGrid.jsx",["138","139","140","141","142","143"],"import React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nimport { getYear } from \"../services/cloud_data_functions\";\n\nimport \"../css/D3YearGrid.css\";\n\nimport MultiRangeSlider from \"./MultiRangeSlider\";\n\nfunction D3YearGrid(props) {\n  const d3Grid = useRef();\n  // const [data, setData] = useState([]);\n\n  // 1 = day_number\n  // 2 = radiation/c_index\n  // 3 = months\n  // 4 = play song\n  const [sortMethod, setSortMethod] = useState(1);\n  const [svg, setSvg] = useState(null);\n  const [recs, setRecs] = useState({});\n  const [nRecsPerRow, setNRecsPerRow] = useState(null);\n  const [gridGap, setGridGap] = useState({});\n  const [monthsLength, setMonthsLength] = useState({});\n  // const [indexThreshold, setIndexThreshold] = useState(100);\n  const [filterMin, setFilterMin] = useState(0);\n  const [filterMax, setFilterMax] = useState(100);\n\n  useEffect(() => {\n    // The data should be all ready when we load this component :)\n    // console.log(\"Inside D3YearGrid!\");\n    // console.log(props.data);\n    // console.log(\"year: \" + props.year);\n\n    const margin = { top: 0, right: 0, bottom: 0, left: 0 };\n    const width = parseInt(d3.select(\".d3Container\").style(\"width\"));\n    // const height = parseInt(d3.select(\".d3Container\").style(\"height\"));\n    const height = 1 * width;\n    const gridGapX = 0;\n    const gridGapY = 0;\n    setGridGap({ x: gridGapX, y: gridGapY });\n\n    // set up the svg\n    const svg_temp = d3\n      .select(d3Grid.current)\n      .attr(\"width\", width - margin.left - margin.right)\n      .attr(\"height\", height - margin.top - margin.bottom)\n      .attr(\"class\", \"D3Svg\")\n      // .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    setSvg(svg_temp);\n\n    var svg_width = width;\n    var n_recs_per_row = 20;\n    var rec_w = Math.floor((0.7 * svg_width) / n_recs_per_row);\n    var rec_h = rec_w;\n    setNRecsPerRow(n_recs_per_row);\n    setRecs({ width: rec_w, height: rec_h });\n\n    // Add the rectangles\n    svg_temp\n      .selectAll(\"rect\") // There's no 'rect' to select. But this is how we do to fill the svg with 'rects'.\n      .data(props.data) // here we load the data\n      .enter()\n      .append(\"rect\") // .enter().append() -> for each datapoint in the dataset, add a 'rect'.\n      .attr(\"width\", rec_w)\n      .attr(\"height\", rec_h)\n      .attr(\"x\", function (d, i) {\n        return (i % n_recs_per_row) * (rec_w + gridGapX) + 0.15 * svg_width;\n      })\n      .attr(\"y\", function (d, i) {\n        return (\n          Math.floor(i / n_recs_per_row) * (rec_h + gridGapY) + 0.15 * svg_width\n        );\n      })\n      .attr(\"fill\", function (d, i) {\n        var bright_color = [100, 146, 230];\n        var dark_color = [99, 112, 124];\n\n        var factor = Math.floor(d.c_index / 10) * 10;\n\n        // hard coding colors:\n        var color = [];\n        if (factor < 10) {\n          // 1.jpg\n          color = [100, 146, 230];\n        } else if (factor >= 10 && factor < 20) {\n          // 2.jpg\n          color = [99, 143, 224];\n        } else if (factor >= 20 && factor < 30) {\n          // 3.jpg\n          color = [96, 142, 214];\n        } else if (factor >= 30 && factor < 40) {\n          // 4.jpg\n          color = [94, 138, 204];\n        } else if (factor >= 40 && factor < 50) {\n          // 5.jpg\n          color = [94, 136, 193];\n        } else if (factor >= 50 && factor < 60) {\n          // 6.jpg\n          color = [93, 131, 182];\n        } else if (factor >= 60 && factor < 70) {\n          // 7.jpg\n          color = [93, 128, 170];\n        } else if (factor >= 70 && factor < 80) {\n          // 8.jpg\n          color = [95, 124, 154];\n        } else if (factor >= 80 && factor < 90) {\n          // 9.jpg\n          color = [97, 118, 138];\n        } else if (factor >= 90) {\n          // 10.jpg\n          color = [99, 112, 124];\n        }\n        return \"rgba(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \", 1)\";\n      })\n      .style(\"stroke-opacity\", 1) // set the stroke opacity\n      .style(\"stroke\", \"black\") // set the line colour\n      .style(\"stroke-width\", 0.5) // set the stroke width\n\n      .html(function (d, i) {\n        return d.day_number;\n      });\n\n    var monthNames = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n\n    // Adding month labels\n    svg_temp\n      .selectAll(\"text\")\n      .data(monthNames)\n      .enter()\n      .append(\"text\")\n      .text(function (d) {\n        return d;\n      })\n      .attr(\"x\", -100)\n      .attr(\"y\", function (d, i) {\n        return 130 + i * 45;\n      });\n\n    // We need to check if the year is a leap year because in that case the month\n    // of february has 29 days instead of 28. This will be essential for sorting\n    // the months visually.\n\n    if (props.data.length === 366) {\n      setMonthsLength({\n        1: 31,\n        2: 29, // February has 29 days in leap years\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31,\n      });\n    } else if (props.data.length === 365) {\n      setMonthsLength({\n        1: 31,\n        2: 28, // February has 28 days in non-leap years\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31,\n      });\n    }\n  }, []);\n\n  function handleSortLight() {\n    // console.log(\"Sort Light\");\n\n    if (sortMethod !== 2) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n\n        svg\n          .selectAll(\"rect\")\n          .sort(function (x, y) {\n            return d3.ascending(x.c_index, y.c_index);\n          })\n          .transition()\n          .duration(2000)\n          .attr(\"width\", recs.width)\n          .attr(\"height\", recs.height)\n          .attr(\"x\", function (d, i) {\n            return (\n              (i % nRecsPerRow) * (recs.width + gridGap.x) + 0.15 * svg_width\n            );\n          })\n          .attr(\"y\", function (d, i) {\n            // console.log(Math.floor(i / 33));\n            return (\n              Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n              0.15 * svg_width\n            );\n          });\n\n        // Hiding month labels\n        svg\n          .selectAll(\"text\")\n          .transition()\n          .duration(2000)\n          .attr(\"x\", -100)\n          .attr(\"y\", function (d, i) {\n            return 130 + i * 45;\n          });\n      }\n\n      setSortMethod(2);\n    }\n  }\n\n  function handleSortDay() {\n    // console.log(\"Sort Day\");\n\n    if (sortMethod !== 1) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n\n        svg\n          .selectAll(\"rect\")\n          .sort(function (x, y) {\n            return d3.ascending(x.day_number, y.day_number);\n          })\n          .transition()\n          .duration(2000)\n          .attr(\"width\", recs.width)\n          .attr(\"height\", recs.height)\n          .attr(\"x\", function (d, i) {\n            return (\n              (i % nRecsPerRow) * (recs.width + gridGap.x) + 0.15 * svg_width\n            );\n          })\n          .attr(\"y\", function (d, i) {\n            // console.log(Math.floor(i / 33));\n            return (\n              Math.floor(i / nRecsPerRow) * (recs.height + gridGap.y) +\n              0.15 * svg_width\n            );\n          });\n\n        // Hiding month labels\n        svg\n          .selectAll(\"text\")\n          .transition()\n          .duration(2000)\n          .attr(\"x\", -100)\n          .attr(\"y\", function (d, i) {\n            return 130 + i * 45;\n          });\n\n        setSortMethod(1);\n      }\n    }\n  }\n\n  function handleSortMonth() {\n    console.log(\"Sort Month\");\n\n    if (sortMethod !== 3) {\n      // If the setState already dumped the dvg data into our svg variable\n      if (svg) {\n        console.log(\"Group Month!\");\n\n        let svg_width = svg.style(\"width\").replace(\"px\", \"\");\n\n        svg\n          .selectAll(\"rect\")\n          .sort(function (x, y) {\n            return d3.ascending(x.day_number, y.day_number);\n          })\n          .transition()\n          .duration(2000)\n          .attr(\"width\", recs.width)\n          .attr(\"height\", recs.height)\n          .attr(\"x\", function (d, i) {\n            // This will be useful for knowing how to distribute the\n            //  squares in months. We'll need this logic becausse there are\n            //  leap years, where the month of February has 29 days.\n            let summedDaysPreviousMonth = 0;\n            for (let m = 1; m < d.month; m++) {\n              summedDaysPreviousMonth += monthsLength[m];\n            }\n\n            // January\n            if (d.month === 1) {\n              return (i % 6) * recs.width + 0.05 * svg_width;\n            }\n\n            // February\n            else if (d.month === 2) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                7 * recs.width\n              );\n            }\n\n            // March\n            else if (d.month === 3) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                14 * recs.width\n              );\n            }\n\n            // April\n            else if (d.month === 4) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                21 * recs.width\n              );\n            }\n\n            // May\n            else if (d.month === 5) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width\n              );\n            }\n\n            // Jun\n            else if (d.month === 6) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                7 * recs.width\n              );\n            }\n\n            // July\n            else if (d.month === 7) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                14 * recs.width\n              );\n            }\n\n            // August\n            else if (d.month === 8) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                21 * recs.width\n              );\n            }\n\n            // September\n            else if (d.month === 9) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width\n              );\n            }\n\n            // October\n            else if (d.month === 10) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                7 * recs.width\n              );\n            }\n\n            // November\n            else if (d.month === 11) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                14 * recs.width\n              );\n            }\n\n            // December\n            else if (d.month === 12) {\n              return (\n                ((i - summedDaysPreviousMonth) % 6) * recs.width +\n                0.05 * svg_width +\n                21 * recs.width\n              );\n            } else {\n              return 500;\n            }\n          })\n          .attr(\"y\", function (d, i) {\n            // This will be useful for knowing how to distribute the\n            //  squares in months. We'll need this logic becausse there are\n            //  leap years, where the month of February has 29 days.\n            let summedDaysPreviousMonth = 0;\n            for (let m = 1; m < d.month; m++) {\n              summedDaysPreviousMonth += monthsLength[m];\n            }\n\n            // January\n            if (d.month === 1) {\n              return Math.floor(i / 6) * recs.height + 0.05 * svg_width;\n            }\n\n            // February\n            else if (d.month === 2) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width\n              );\n            }\n\n            // March\n            else if (d.month === 3) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width\n              );\n            }\n\n            // April\n            else if (d.month === 4) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width\n              );\n            }\n\n            // May\n            else if (d.month === 5) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                9 * recs.height\n              );\n            }\n\n            // June\n            else if (d.month === 6) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                9 * recs.height\n              );\n            }\n\n            // July\n            else if (d.month === 7) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                9 * recs.height\n              );\n            }\n\n            // August\n            else if (d.month === 8) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                9 * recs.height\n              );\n            }\n\n            // September\n            else if (d.month === 9) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                18 * recs.height\n              );\n            }\n\n            // October\n            else if (d.month === 10) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                18 * recs.height\n              );\n            }\n\n            // November\n            else if (d.month === 11) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                18 * recs.height\n              );\n            }\n\n            // Dececmber\n            else if (d.month === 12) {\n              return (\n                Math.floor((i - summedDaysPreviousMonth) / 6) * recs.height +\n                0.05 * svg_width +\n                18 * recs.height\n              );\n            }\n          });\n\n        // Writing months names\n        svg\n          .selectAll(\"text\")\n          .transition()\n          .duration(2000)\n          .attr(\"x\", function (d, i) {\n            // if (d === \"January\") {\n            if (i === 0) {\n              return 0.05 * svg_width;\n              // } else if (d === \"February\") {\n            } else if (i === 1) {\n              return 0.05 * svg_width + 7 * recs.width;\n              // } else if (d === \"March\") {\n            } else if (i === 2) {\n              return 0.05 * svg_width + 14 * recs.width;\n              // } else if (d === \"April\") {\n            } else if (i === 3) {\n              return 0.05 * svg_width + 21 * recs.width;\n            }\n            // 2nd row\n            // else if (d === \"May\") {\n            else if (i === 4) {\n              return 0.05 * svg_width;\n              // } else if (d === \"June\") {\n            } else if (i === 5) {\n              return 0.05 * svg_width + 7 * recs.width;\n              // } else if (d === \"July\") {\n            } else if (i === 6) {\n              return 0.05 * svg_width + 14 * recs.width;\n              // } else if (d === \"August\") {\n            } else if (i === 7) {\n              return 0.05 * svg_width + 21 * recs.width;\n            }\n            // 3rd row\n            // else if (d === \"September\") {\n            else if (i === 8) {\n              return 0.05 * svg_width;\n              // } else if (d === \"October\") {\n            } else if (i === 9) {\n              return 0.05 * svg_width + 7 * recs.width;\n              // } else if (d === \"November\") {\n            } else if (i === 10) {\n              return 0.05 * svg_width + 14 * recs.width;\n              // } else if (d === \"December\") {\n            } else if (i === 11) {\n              return 0.05 * svg_width + 21 * recs.width;\n            }\n          })\n          .attr(\"y\", function (d, i) {\n            // if (d === \"January\") {\n            if (i === 0) {\n              return 0.05 * svg_width - 10;\n              // } else if (d === \"February\") {\n            } else if (i === 1) {\n              return 0.05 * svg_width - 10;\n              // } else if (d === \"March\") {\n            } else if (i === 2) {\n              return 0.05 * svg_width - 10;\n              // } else if (d === \"April\") {\n            } else if (i === 3) {\n              return 0.05 * svg_width - 10;\n            }\n\n            // 2nd row\n            // else if (d === \"May\") {\n            else if (i === 4) {\n              return 0.05 * svg_width + 9 * recs.height - 10;\n              // } else if (d === \"June\") {\n            } else if (i === 5) {\n              return 0.05 * svg_width + 9 * recs.height - 10;\n              // } else if (d === \"July\") {\n            } else if (i === 6) {\n              return 0.05 * svg_width + 9 * recs.height - 10;\n              // } else if (d === \"August\") {\n            } else if (i === 7) {\n              return 0.05 * svg_width + 9 * recs.height - 10;\n            }\n            // 3rd row\n            // else if (d === \"September\") {\n            else if (i === 8) {\n              return 0.05 * svg_width + 18 * recs.height - 10;\n              // } else if (d === \"October\") {\n            } else if (i === 9) {\n              return 0.05 * svg_width + 18 * recs.height - 10;\n              // } else if (d === \"November\") {\n            } else if (i === 10) {\n              return 0.05 * svg_width + 18 * recs.height - 10;\n              // } else if (d === \"December\") {\n            } else if (i === 11) {\n              return 0.05 * svg_width + 18 * recs.height - 10;\n            }\n          });\n      }\n\n      setSortMethod(3);\n    }\n  }\n\n  // function handleSlideChange(event) {\n  function handleSlideChange(min, max) {\n    // console.log(\"Slide changed: \" + event.target.value);\n\n    if (svg) {\n      // setIndexThreshold(event.target.value);\n\n      // Setting the filter variables\n      setFilterMin(min);\n      setFilterMax(max);\n\n      // This is the sample color to be displayed. So the user knows what she/he is filtering. What does 10% of cloud mean?? There's a need for a photo there.\n      // // Hard coding colors:\n      // const radiation_filter_factor = event.target.value;\n\n      // var color = [];\n      // if (radiation_filter_factor < 10) {\n      //   // 1.jpg\n      //   color = [100, 146, 230];\n      // } else if (\n      //   radiation_filter_factor >= 10 &&\n      //   radiation_filter_factor < 20\n      // ) {\n      //   // 2.jpg\n      //   color = [99, 143, 224];\n      // } else if (\n      //   radiation_filter_factor >= 20 &&\n      //   radiation_filter_factor < 30\n      // ) {\n      //   // 3.jpg\n      //   color = [96, 142, 214];\n      // } else if (\n      //   radiation_filter_factor >= 30 &&\n      //   radiation_filter_factor < 40\n      // ) {\n      //   // 4.jpg\n      //   color = [94, 138, 204];\n      // } else if (\n      //   radiation_filter_factor >= 40 &&\n      //   radiation_filter_factor < 50\n      // ) {\n      //   // 5.jpg\n      //   color = [94, 136, 193];\n      // } else if (\n      //   radiation_filter_factor >= 50 &&\n      //   radiation_filter_factor < 60\n      // ) {\n      //   // 6.jpg\n      //   color = [93, 131, 182];\n      // } else if (\n      //   radiation_filter_factor >= 60 &&\n      //   radiation_filter_factor < 70\n      // ) {\n      //   // 7.jpg\n      //   color = [93, 128, 170];\n      // } else if (\n      //   radiation_filter_factor >= 70 &&\n      //   radiation_filter_factor < 80\n      // ) {\n      //   // 8.jpg\n      //   color = [95, 124, 154];\n      // } else if (\n      //   radiation_filter_factor >= 80 &&\n      //   radiation_filter_factor < 90\n      // ) {\n      //   // 9.jpg\n      //   color = [97, 118, 138];\n      // } else if (radiation_filter_factor >= 90) {\n      //   // 10.jpg\n      //   color = [99, 112, 124];\n      // }\n      // // Updating the color of the sample\n      // document.getElementById(\"color_sample\").style.backgroundColor =\n      //   \"rgb(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \")\";\n\n      // Changing the colors of the squares\n      svg\n        .selectAll(\"rect\")\n        .transition()\n        .duration(800)\n        .attr(\"fill\", function (d, i) {\n          var cell_radiation_factor = Math.floor(d.c_index / 10) * 10;\n\n          var color = [];\n\n          // If the radiation value of the cell is smaller than the\n          //  radiation velue of the threshold (in the slide), we going\n          //  to fill it with black\n          // if (cell_radiation_factor > radiation_filter_factor) {\n          if (cell_radiation_factor < min || cell_radiation_factor > max) {\n            // color = [0, 0, 0];\n            color = [255, 255, 255];\n          }\n          // Otherwise we fill it with the proper color\n          else {\n            if (cell_radiation_factor < 10) {\n              // 1.jpg\n              color = [100, 146, 230];\n            } else if (\n              cell_radiation_factor >= 10 &&\n              cell_radiation_factor < 20\n            ) {\n              // 2.jpg\n              color = [99, 143, 224];\n            } else if (\n              cell_radiation_factor >= 20 &&\n              cell_radiation_factor < 30\n            ) {\n              // 3.jpg\n              color = [96, 142, 214];\n            } else if (\n              cell_radiation_factor >= 30 &&\n              cell_radiation_factor < 40\n            ) {\n              // 4.jpg\n              color = [94, 138, 204];\n            } else if (\n              cell_radiation_factor >= 40 &&\n              cell_radiation_factor < 50\n            ) {\n              // 5.jpg\n              color = [94, 136, 193];\n            } else if (\n              cell_radiation_factor >= 50 &&\n              cell_radiation_factor < 60\n            ) {\n              // 6.jpg\n              color = [93, 131, 182];\n            } else if (\n              cell_radiation_factor >= 60 &&\n              cell_radiation_factor < 70\n            ) {\n              // 7.jpg\n              color = [93, 128, 170];\n            } else if (\n              cell_radiation_factor >= 70 &&\n              cell_radiation_factor < 80\n            ) {\n              // 8.jpg\n              color = [95, 124, 154];\n            } else if (\n              cell_radiation_factor >= 80 &&\n              cell_radiation_factor < 90\n            ) {\n              // 9.jpg\n              color = [97, 118, 138];\n            } else if (cell_radiation_factor >= 90) {\n              // 10.jpg\n              color = [99, 112, 124];\n            }\n          }\n\n          return \"rgba(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \", 1)\";\n        });\n    }\n  }\n\n  function handlePlaySong() {\n    setSortMethod(4);\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"grid_controlers\">\n        <div className=\"buttons\">\n          <button\n            className={\n              sortMethod === 2\n                ? \"sortingButton selectedButton\"\n                : \"sortingButton\"\n            }\n            onClick={handleSortLight}\n          >\n            Sort Light\n          </button>\n          <button\n            className={\n              sortMethod === 1\n                ? \"sortingButton selectedButton\"\n                : \"sortingButton\"\n            }\n            onClick={handleSortDay}\n          >\n            Sort Date\n          </button>\n          <button\n            className={\n              sortMethod === 3\n                ? \"sortingButton selectedButton\"\n                : \"sortingButton\"\n            }\n            onClick={handleSortMonth}\n          >\n            Group Months\n          </button>\n          <button\n            className={\n              sortMethod === 4\n                ? \"sortingButton selectedButton musicSymbol\"\n                : \"sortingButton musicSymbol\"\n            }\n            onClick={handlePlaySong}\n          >\n            &#9835;\n          </button>\n        </div>\n\n        <div className=\"slidecontainer\">\n          <MultiRangeSlider min={0} max={100} onChange={handleSlideChange} />\n        </div>\n        {/* <div className=\"slidecontainer\">\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            defaultValue=\"100\"\n            className=\"slider\"\n            id=\"colorSlider\"\n            onInput={handleSlideChange}\n          />\n          <p id=\"slide_value_p\"> {indexThreshold}</p>\n          <div id=\"color_sample\"></div>\n        </div> */}\n      </div>\n\n      <div className=\"d3Container\">\n        <svg ref={d3Grid}></svg>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default D3YearGrid;\n","/Users/k1/Desktop/stockholm_sky/app/src/hooks/MultiRangeSlider.jsx",[],"/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/index.js",[],"/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/reportWebVitals.js",[],"/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/App.js",["144"],"/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/yearGrid.jsx",["145"],"/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/hidenMenu.jsx",["146"],"/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/yearPanelSmall.jsx",["147","148","149"],"/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/services/cloud_data_functions.js",[],"/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/D3YearGrid.jsx",["150","151","152","153","154","155","156","157","158"],"/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/aDaySkyPhoto.jsx",["159"],"/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/yearGridSmall.jsx",["160","161","162","163"],"/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/services/cloud_1756_2018.js",[],"/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/aDaySkyPhotoSmall.jsx",["164","165"],"/Users/k1/Desktop/stockholm_sky_gitpages2/app/src/hooks/MultiRangeSlider.jsx",[],{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":7,"column":8,"nodeType":"172","messageId":"173","endLine":7,"endColumn":17},{"ruleId":"170","severity":1,"message":"174","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":25},{"ruleId":"170","severity":1,"message":"175","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":25},{"ruleId":"170","severity":1,"message":"176","line":2,"column":8,"nodeType":"172","messageId":"173","endLine":2,"endColumn":21},{"ruleId":"177","severity":1,"message":"178","line":27,"column":6,"nodeType":"179","endLine":27,"endColumn":8,"suggestions":"180"},{"ruleId":"170","severity":1,"message":"174","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":25},{"ruleId":"170","severity":1,"message":"174","line":1,"column":27,"nodeType":"172","messageId":"173","endLine":1,"endColumn":35},{"ruleId":"181","severity":1,"message":"182","line":25,"column":33,"nodeType":"183","messageId":"184","endLine":25,"endColumn":35},{"ruleId":"181","severity":1,"message":"182","line":27,"column":22,"nodeType":"183","messageId":"184","endLine":27,"endColumn":24},{"ruleId":"177","severity":1,"message":"178","line":38,"column":6,"nodeType":"179","endLine":38,"endColumn":8,"suggestions":"185"},{"ruleId":"170","severity":1,"message":"186","line":40,"column":12,"nodeType":"172","messageId":"173","endLine":40,"endColumn":29},{"ruleId":"170","severity":1,"message":"175","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":25},{"ruleId":"177","severity":1,"message":"187","line":32,"column":6,"nodeType":"179","endLine":32,"endColumn":8,"suggestions":"188"},{"ruleId":"170","severity":1,"message":"189","line":4,"column":10,"nodeType":"172","messageId":"173","endLine":4,"endColumn":17},{"ruleId":"170","severity":1,"message":"190","line":25,"column":10,"nodeType":"172","messageId":"173","endLine":25,"endColumn":19},{"ruleId":"170","severity":1,"message":"191","line":26,"column":10,"nodeType":"172","messageId":"173","endLine":26,"endColumn":19},{"ruleId":"170","severity":1,"message":"192","line":77,"column":13,"nodeType":"172","messageId":"173","endLine":77,"endColumn":25},{"ruleId":"170","severity":1,"message":"193","line":78,"column":13,"nodeType":"172","messageId":"173","endLine":78,"endColumn":23},{"ruleId":"177","severity":1,"message":"194","line":189,"column":6,"nodeType":"179","endLine":189,"endColumn":8,"suggestions":"195"},{"ruleId":"170","severity":1,"message":"171","line":7,"column":8,"nodeType":"172","messageId":"173","endLine":7,"endColumn":17},{"ruleId":"170","severity":1,"message":"174","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":25},{"ruleId":"170","severity":1,"message":"174","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":25},{"ruleId":"170","severity":1,"message":"175","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":25},{"ruleId":"170","severity":1,"message":"176","line":2,"column":8,"nodeType":"172","messageId":"173","endLine":2,"endColumn":21},{"ruleId":"177","severity":1,"message":"178","line":27,"column":6,"nodeType":"179","endLine":27,"endColumn":8,"suggestions":"196"},{"ruleId":"170","severity":1,"message":"189","line":4,"column":10,"nodeType":"172","messageId":"173","endLine":4,"endColumn":17},{"ruleId":"170","severity":1,"message":"190","line":25,"column":10,"nodeType":"172","messageId":"173","endLine":25,"endColumn":19},{"ruleId":"170","severity":1,"message":"191","line":26,"column":10,"nodeType":"172","messageId":"173","endLine":26,"endColumn":19},{"ruleId":"170","severity":1,"message":"197","line":27,"column":22,"nodeType":"172","messageId":"173","endLine":27,"endColumn":35},{"ruleId":"170","severity":1,"message":"192","line":111,"column":15,"nodeType":"172","messageId":"173","endLine":111,"endColumn":27},{"ruleId":"170","severity":1,"message":"193","line":112,"column":15,"nodeType":"172","messageId":"173","endLine":112,"endColumn":25},{"ruleId":"177","severity":1,"message":"198","line":214,"column":6,"nodeType":"179","endLine":214,"endColumn":39,"suggestions":"199"},{"ruleId":"170","severity":1,"message":"200","line":830,"column":11,"nodeType":"172","messageId":"173","endLine":830,"endColumn":20},{"ruleId":"170","severity":1,"message":"201","line":831,"column":11,"nodeType":"172","messageId":"173","endLine":831,"endColumn":21},{"ruleId":"170","severity":1,"message":"174","line":1,"column":27,"nodeType":"172","messageId":"173","endLine":1,"endColumn":35},{"ruleId":"181","severity":1,"message":"182","line":25,"column":33,"nodeType":"183","messageId":"184","endLine":25,"endColumn":35},{"ruleId":"181","severity":1,"message":"182","line":27,"column":22,"nodeType":"183","messageId":"184","endLine":27,"endColumn":24},{"ruleId":"177","severity":1,"message":"178","line":38,"column":6,"nodeType":"179","endLine":38,"endColumn":8,"suggestions":"202"},{"ruleId":"170","severity":1,"message":"186","line":40,"column":12,"nodeType":"172","messageId":"173","endLine":40,"endColumn":29},{"ruleId":"170","severity":1,"message":"175","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":25},{"ruleId":"177","severity":1,"message":"187","line":32,"column":6,"nodeType":"179","endLine":32,"endColumn":8,"suggestions":"203"},"no-native-reassign",["204"],"no-negated-in-lhs",["205"],"no-unused-vars","'HidenMenu' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Fragment' is defined but never used.","'YearGridSmall' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.year'. Either include it or remove the dependency array.","ArrayExpression",["206"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["207"],"'printYearsDataRaw' is defined but never used.","React Hook useEffect has a missing dependency: 'props.cloudData.c_index'. Either include it or remove the dependency array.",["208"],"'getYear' is defined but never used.","'filterMin' is assigned a value but never used.","'filterMax' is assigned a value but never used.","'bright_color' is assigned a value but never used.","'dark_color' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.data'. Either include it or remove the dependency array.",["209"],["210"],"'setMonthNames' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleMouseOutMonthLabel', 'handleMouseOverMonthLabel', 'monthNames', and 'props.data'. Either include them or remove the dependency array.",["211"],"'new_width' is assigned a value but never used.","'new_height' is assigned a value but never used.",["212"],["213"],"no-global-assign","no-unsafe-negation",{"desc":"214","fix":"215"},{"desc":"214","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"214","fix":"221"},{"desc":"222","fix":"223"},{"desc":"214","fix":"224"},{"desc":"217","fix":"225"},"Update the dependencies array to be: [props.year]",{"range":"226","text":"227"},{"range":"228","text":"227"},"Update the dependencies array to be: [props.cloudData.c_index]",{"range":"229","text":"230"},"Update the dependencies array to be: [props.data]",{"range":"231","text":"232"},{"range":"233","text":"227"},"Update the dependencies array to be: [svg, recs, nRecsPerRow, gridGap, props.data, monthNames, handleMouseOverMonthLabel, handleMouseOutMonthLabel]",{"range":"234","text":"235"},{"range":"236","text":"227"},{"range":"237","text":"230"},[861,863],"[props.year]",[1236,1238],[1060,1062],"[props.cloudData.c_index]",[5448,5450],"[props.data]",[861,863],[6551,6584],"[svg, recs, nRecsPerRow, gridGap, props.data, monthNames, handleMouseOverMonthLabel, handleMouseOutMonthLabel]",[1236,1238],[1060,1062]]